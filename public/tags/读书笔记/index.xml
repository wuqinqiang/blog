<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on 记得</title>
    <link>https://www.syst.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on 记得</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 19 Mar 2022 08:42:10 +0800</lastBuildDate><atom:link href="https://www.syst.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《软件架构设计》读书笔记</title>
      <link>https://www.syst.top/readings/go-concurrency-2021-04-20/</link>
      <pubDate>Sat, 19 Mar 2022 08:42:10 +0800</pubDate>
      
      <guid>https://www.syst.top/readings/go-concurrency-2021-04-20/</guid>
      <description>之前说过，会分享一些看书笔记。 前段时间，大佬同事推荐了一本书，书名叫《软件架构设计:大型网站技术架构与业务架构融合之道》,特做一些笔记分享。
这本书整体分为五个部分。
 什么是架构 计算机功底 技术架构之道 业务架构之道 从架构得到技术管理  围绕这五个部分总计17章节。
接下来，我会分享部分我感兴趣的章节。
第一部分：什么是架构？ 一句话:架构是针对所有重要问题做出的重要决策。
不同公司或者相同公司在不同的阶段所面临的问题不同，架构自然也会有所不同。
个人认为，不存在称之为完美的架构，只会存在最适合的。面对的场景，着重的目的不同，那么相应的决策也会不同(有点废话)。
架构的分类。 作者从技术的角度，把软件从底向上分层，做了架构的分类。
第一层:基础架构 基础架构指的是云平台、操作系统、网络、存储、数据库和编译等。
第二层:中间件和大数据平台 中间件，例如分布式服务中间件、消息中间件、数据库中间件、缓存中间件等。
第三层:业务系统架构  通用软件系统。例如常用办公软件、播放器。 离线业务。比如各种基于数据的离线计算、数据挖掘。 大型在线系统。比如电商、广告、搜索、推荐、ERP或者CRM等。  整体就像这样, 从上面你也可以看出，只有大厂这三层都有。像小公司可能只有第三层，或者小量的第二层。 印象里，我前司是没有第一层的，第二层是有的。
一般情况下，每一层都会有专门的人去干活。比如第二层会有专门的中间件部门， 对应又分为几个组，每个组负责对应的中间件开发。
业务部门在第三层，一般情况下，他们只负责业务的curd，如果有场景需要用到一些中间件时， 这时候通常会去找负责中间件的人对接，使用他们的sdk等。(ps:好不好用那就是另外一回事了)
还有一个有意思点，作者在书中提到架构的道与术。
什么是架构的道?
抽象点说，对于技术问题，主要是指高并发、高可用和一致性方面。对于业务问题，主要指业务需求分析和建模。 那么，我们在面对这些问题的时候， 是通过大量的业务系统实践，在实践基础上进行的思考和总结，进而提炼出的一些方法论，这就是道。
更具体的的说，比如，
 数据库如何分库分表？ 分库分表的时机如何确定？ 缓存一致性问题如何解决？ 如何拆分服务？ &amp;hellip;&amp;hellip;  等等问题，这些问题解决方案并不是凭空出现的，而是通过大量的实践落地进而总结产生的一套解决方案核心思路。
所以道很多时候是&amp;quot;虚&amp;quot;的东西，越虚意味着就越抽象，如果两个人在讨论某个问题，而对一些专业理论的认知还未处于同一水平上，那听起来就只能离谱了。
所以要讲道之前，得先有术。术就是指对应具体的语言，框架或者中间件使用姿势。这些都是比较具体的东西，实操性强，方面大家理解。
架构的道和术，都不能偏废，一方面需要不断实践(术)，在实践中深入原理。进而把实践的东西抽象，总结出来，形成方法论(道)。 不断的用道来指导新的术，在新的术中再总结出新的道，如此循环往复。
以上是第一部分内容。
第二部分：计算机功底 主要讲解的是术。计算机功底、语言、框架、网络、数据库、操作系统等。
印象最深刻的是框架那一章。作者提到，熟悉一个框架之后，更多的是应该去关注它的缺点，而不是优点。更应该关注它不能做什么，而不是它能做什么。 它不能做什么往往是别的框架的改进点。
细想，如果你不关注它不能做什么，在你们拍板决定使用框架时，做了一半发现， 核心的一块需求它支持不了，这时候只能欲哭无泪了。
第三部分：技术架构之道 主要讲解的是道。 里面分为:
 高并发问题 高可用与稳定性 事务一致性 多副本一致性 CAP理论  因为这一部分主要是关于道方面的，所以很多地方是抽象化的。读者在读这一部分时候，针对一些问题的解决方案，需要自行去思考部分细节。</description>
    </item>
    
  </channel>
</rss>
