<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc-shop on Remember吴亲库里</title>
    <link>https://www.syst.top/tags/grpc-shop/</link>
    <description>Recent content in grpc-shop on Remember吴亲库里</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 22 Aug 2021 08:01:52 +0800</lastBuildDate><atom:link href="https://www.syst.top/tags/grpc-shop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可以躺平一时，不能一直躺平</title>
      <link>https://www.syst.top/lives/tp/</link>
      <pubDate>Sun, 22 Aug 2021 08:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/tp/</guid>
      <description>人可以躺平一时，不能一直躺平。
上周调整了生物钟，晚上十一点前入睡，早上六点起床。
真是一个明智的调整。
以前下班回家没有精力干其他的事。现在早上到上班的这段时间可以自我充电。写文章、敲代码，或者看看书&amp;hellip;&amp;hellip;，突然爱上了这种节奏。
言归正传，
年初开这个号的时候有规划做一些实战项目，可后面也一直没写。
转眼半年过去了，这段计划也应该被提上日程了。
接下来的时间我计划先写三个项目实战。
 grpc-shop 分布式爬虫 Raft 算法实现  为什么要写项目实战？
除了把知识点串起来之外，还有一个最重要的原因，我把它称之为 文档的艺术。
你平常一定会碰到以下困惑。
场景一：对接文档或者使用工具的时候，一定吐槽过别人写的是什么。
站在对接人的角度，我的关注点是 what、how，你却一个劲介绍 much niubi。
虽然我们会吐槽别人的文档，
但是这并不妨碍自己也写出一塌糊涂的文档，也照样一塌糊涂。别人照样对你口吐芬芳，这种场面太过真实了。
记忆中，文档和一次性口罩似乎是同性质的物品。前者用过就丢，后者草草写完封版。
场景二：在和别人讲解自己某个项目、模块、功能的时候，滔滔不绝。可对方依然云里雾里。就像这样：
归根结底，我觉得有五个原因:
 自身对做的东西没有深入去了解。遵循代码和我，有一个能跑的原则。 对细节了如指掌，但是表达能力出现问题。 没有站在读者的角度，你所谓的前置知识、技能、专业名词&amp;hellip;&amp;hellip;，对方完全不知，本质上还是信息(技术认知)差。 内心深处不想让别人了解这个系统，毕竟你想当唯一的消防员👩‍🚒。 读|听者是傻逼。(这个概率有多大?)  能把自己写过的东西、看过的项目&amp;hellip;&amp;hellip;，通过文字、嘴对嘴、视频等方式完整清晰的表达出来是一件非常重要且值得开干的事。
如果连文档都写不清楚，还指望自己能写好 ppt？
因为工作中接触过 grpc，然后也去看了部分源码。看源码的时候，恰巧又发现一处非致命的 bug ，顺手给提了个 pr，后面被合并了。
所以，第一个项目就规划写 grpc-shop。
大体已经规划完了，后面边开发边写文档，类似极客兔兔的七天系列。
grpc-shop 计划 15 篇左右完结撒花。
完毕。</description>
    </item>
    
  </channel>
</rss>
