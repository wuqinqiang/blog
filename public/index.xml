<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>是不是很酷</title>
    <link>https://www.syst.top/</link>
    <description>Recent content on 是不是很酷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 12 Sep 2022 18:11:22 +0800</lastBuildDate><atom:link href="https://www.syst.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Myfriends</title>
      <link>https://www.syst.top/friends/friends/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.syst.top/friends/friends/</guid>
      <description></description>
    </item>
    
    <item>
      <title>一个用go实现的分布式事务框架</title>
      <link>https://www.syst.top/posts/go/easycar/</link>
      <pubDate>Mon, 12 Sep 2022 18:11:22 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/easycar/</guid>
      <description>开篇 对分布式事务一直感兴趣，之前一直被其他事情(懒)耽搁了，最近终于动手了。
easycar是什么 easycar 是一个用go实现的支持两阶段提交协议的分布式事务框架。目前还只支持TCC,SAGA 模式，其他模式待开发。
在介绍easycar 之前，先简单介绍几个角色。
Transaction Coordinator(TC) 负责全局事务的管理，所有参与分布式事务的分支都会注册到coordinator，回给每个分布式事务分配一个唯一id，
当然还包括驱动全局 begin / commit /abort(我喜欢称rollback)。
Transaction Manager (TM) 有些时候也叫 Transaction Client，当然不同的实现也许都会换个名字，但是职责都大差不差。
一般通过TM对每个参与的RM发起一阶段的请求，如果一阶段的RM全部成功，那么TM会向TC发起commit请求，否则发起rollback。
Resource Manager(RM) 用户维度的角色，管理本地事务处理的资源。其实你可以这么理解，假设你的订单服务部分接口参与了分布式事务，无论是第一阶段TM调用接口，还是TC第二阶段调用接口，你的订单服务都会去负责本地的事务修改。
那么 easycar 上述角色有什么不同吗？
有的。既然TC负责的就是全局事务的管理，那么我把职责都给了它。即由TC像每个参与的RM发起一阶段的请求，然后再根据一阶段的结果，发起二阶段的请求。由TC接管整个分布式事务的生命周期。
是的，我弱化了上面TM的能力。在我眼里，TM本质上就是一个客户端。客户端只需要做一些数据封装，简便化操作即可。所以即使没有客户端，其他语言的用户也可以直接通过http请求easycar服务接口。
所以理论上，大部分模式下，不需要客户端也是可以直接使用easycar服务的。
支持协议和事务模式同时混用 参与分布式事务的服务往往由不同的多个部门维护，或者部分新老项目交错，可能无法保证服务的协议是一致的。
另外，不同的服务所采用的事务模式具体是由：业务场景以及构造的成本来决定的。所以参与分布式事务之间所使用的事务模式不一定是统一的。
在这些基础上，easycar支持协议混用(目前支持http和原生的grpc服务)，支持部分事务模式混用(目前支持TCC,Saga)。
支持并发执行 假如现在有 order，account以及stock三个服务。
由这三个服务组成一个分布式事务。 当用户下单时，需要经过这三个服务中内部一些接口(account 扣钱，stock减库存，order 创建订单)。
如果只是同步执行第一阶段，那么第一阶段总执行时间= (account+stock+order)。
很多场景下，分布式事务之间并不会存在执行依赖先后的关系。所以多个子事务一阶段可以同时并发执行。
流程就像这样：
上图我们需要保证创建订单前必须先执行account扣减余额和stock扣减库存服务，才能创建订单order的服务。同时account和stock服务并不需要保证他们的执行顺序。
那么我们一阶段总执行耗时可以粗略=max(account,stock)+order。
因此，easycar是支持分层并发执行的。 对参与的RM通过设置的权重做分层，同一层的RM可以并发调用，一层处理完毕再接下一层。在这个基础上，当某个RM发生调用错误时，那么后面一层也不会执行了，整个分布式事务需要回滚。
异常处理 分布式事务中会出现一些问题，比如
  空补偿： Cancel请求到来时，Try还没有执行，这时候这样的请求我们不能执行，理应直接返回。
  悬挂： Try执行时，Cancel已执行完成，不能执行，直接返回。
  幂等： 所有操作的接口都存在这个问题。
  这些问题需要用户自己去解决，框架不会自动帮你处理。
在我看来，这些问题本身就是服务的必要工作，而不是通过外部服务来帮你保证。
换句话说，前端说它参数做了校验，难道后端就不校验接口了吗？</description>
    </item>
    
    <item>
      <title>婚姻</title>
      <link>https://www.syst.top/lives/hunyin/</link>
      <pubDate>Sun, 19 Jun 2022 21:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/hunyin/</guid>
      <description>这也算不定期更新的日常。
对我来说好遥远的话题啊。
高中的前桌和我说国庆要结婚了，真替她感到高兴。
发小的婚礼和她是同一天。
好在前桌是嫁人，女方正餐是中午。发小是娶媳妇，正餐是晚上，两边正餐都赶的上，一点都不误吃席。
村里同阶段的发小挺多了的，没结婚的就更多了。以至于每次我们都会互相调侃对方啥时让兄弟们吃席。
这两年断断续续参加了几次同学朋友发小的婚礼，每次都会有不一样的体验。
尽管他们的面容千姿百态，但是脸上写满的笑容都一样的藏不住。
难道，只有婚姻才能让他们开怀大笑吗？
可是，每每和他们接触的时候，并没有看出婚姻对他们进行的自身&amp;quot;改造&amp;quot;，以至于我一度怀疑婚姻的可选性。
因此，我曾经开玩笑似的问一个朋友，
结婚后有什么区别。
朋友的回答是没啥区别。
咋么能没啥区别呢。
噢，他一定是在敷衍我。
说实话，我确实无法体会婚姻意味着什么。家庭、责任、义务&amp;hellip;&amp;hellip;，这些都是别人口中说的，和我没什么关系。
但是随着年纪的增大，环境因素的干扰(主要是爸妈，每每和我聊天的时候都会不经意间的暗示)，我不得不开始考虑这个问题。
之前一个朋友和她男朋友同居了。她就一个婚前同居的问题和我有过讨论，她觉得就应该有婚前同居的行为，才能深入了解对方balabala&amp;hellip;..
我猜是她和另外的人关于这个问题发生了争执，所以才来问问我。
我哪懂这些啊。
但是我心里很清楚，她的本质并不是和我讨论这个问题的对错，而是来寻求我的肯定。
她需要别人去认可她的做法，以寻求内心的平静。
所以我只是在她发表自己想法的同时点头说嗯，仅此而已。
现在，她也快结婚了。
至于我，首先得new个对象。</description>
    </item>
    
    <item>
      <title>Gnet原理解析</title>
      <link>https://www.syst.top/posts/go/gnet/</link>
      <pubDate>Tue, 07 Jun 2022 16:23:51 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/gnet/</guid>
      <description>距离上次写文章过了一月有余，这段时间着实太躺了。以至于昨晚做了一个噩梦，醒来的时候狠狠的抽了自己两巴掌，不能这么躺了。
上面当然是个笑话。
开篇 上一篇我们分析了Go原生网络模型以及部分源码，绝大部分场景下(99%)，使用原生netpoll已经足够了。
但是在一些海量并发连接下，原生netpoll会为每一个连接都开启一个goroutine处理，也就是1千万的连接就会创建一千万个goroutine。这就给了这些特殊场景下的优化空间，这也是像gnet和cloudwego/netpoll诞生的原因之一吧。
本质上他们的底层核心都是一样的，都是基于epoll(linux)实现的。
只是对事件发生后，每个库的处理方式会有所不同。
本篇文章主要分析gnet的。至于使用姿势就不发了，gnet有对应的demo库，可以自行体验。
架构 直接引用gnet官网的一张图
gnet采用的是『主从多 Reactors』。也就是一个主线程负责监听端口连接，当一个客户端连接到来时，就把这个连接根据负载均衡算法分配给其中一个sub线程，由对应的sub线程去处理这个连接的读写事件以及管理它的死亡。
下面这张图就更清晰了。
核心结构 我们先解释gnet的一些核心结构。
engine就是程序最上层的结构了。
  ln对应的listener就是服务启动后对应监听端口的监听器。
  lb对应的loadBalancer就是负载均衡器。也就是当客户端连接服务时，负载均衡器会选择一个sub线程，把连接交给此线程处理。
  mainLoop 就是我们的主线程了，对应的结构eventloop。当然我们的sub线程结构也是eventloop。结构相同，不同的是职责。主线程负责的是监听端口发生的客户端连接事件，然后再由负载均衡器把连接分配给一个sub线程。而sub线程负责的是绑定分配给他的连接(不止一个)，且等待自己管理的所有连接后续读写事件，并进行处理。
  接着看eventloop。
 netpoll.Poller:每一个 eventloop都对应一个epoll或者kqueue。 buffer用来作为读消息的缓冲区。 connCoun记录当前eventloop存储的tcp连接数。 udpSockets和connetcions分别管理着这个eventloop下所有的udp socket和tcp连接，注意他们的结构map。这里的int类型存储的就是fd。  对应conn结构，
这里面有几个字段介绍下，
 buffer:存储当前conn对端(client)发送的最新数据，比如发送了三次，那个此时buffer存储的是第三次的数据,代码里有。 inboundBuffer:存储对端发送的且未被用户读取的剩余数据，还是个Ring Buffer。 outboundBuffer:存储还未发送给对端的数据。(比如服务端响应客户端的数据，由于conn fd是不阻塞的，调用write返回不可写的时候，就可以先把数据放到这里)  conn相当于每个连接都会有自己独立的缓存空间。这样做是为了减少集中式管理内存带来的锁问题。使用Ring buffer是为了增加空间的复用性。
整体结构就这些。
核心逻辑 当程序启动时，
会根据用户设置的options明确eventloop循环的数量，也就是有多少个sub线程。再进一步说，在linux环境就是会创建多少个epoll对象。
那么整个程序的epoll对象就是count(sub)+1(main Listener)。
上图就是我说的，会根据设置的数量创建对应的eventloop,把对应的eventloop 注册到负载均衡器中。
当新连接到来时，就可以根据一定的算法(gnet提供了轮询、最少连接以及hash)挑选其中一个eventloop把连接分配给它。
我们先来看主线程，(由于我使用的是mac,所以后面关于IO多路复用，实现部分就是kqueue代码了，当然原理是一样的)
Polling就是等待网络事件到来，传递了一个闭包参数，更确切的说是一个事件到来时的回调函数，从名字可以看出，就是处理新连接的。
至于Polling函数，
逻辑很简单，一个for循环等待事件到来，然后处理事件。
主线程的事件分两种，
一种是正常的fd发生网络连接事件，
一种是通过NOTE_TRIGGER立即激活的事件。
通过NOTE_TRIGGER触发告诉你队列里有task任务，去执行task任务。
如果是正常的网络事件到来，就处理闭包函数，主线程处理的就是上面的accept连接函数。
accept连接逻辑很简单，拿到连接的fd。设置fd非阻塞模式(想想连接是阻塞的会咋么样?),然后根据负载均衡算法选择一个sub 线程，通过register函数把此连接分配给它。
register做了两件事，首先需要把当前连接注册到当前sub 线程的epoll or kqueue 对象中,新增read的flag。</description>
    </item>
    
    <item>
      <title>不定期更新的日常之远程办公</title>
      <link>https://www.syst.top/lives/every-thing-is-ok/</link>
      <pubDate>Fri, 13 May 2022 23:23:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/every-thing-is-ok/</guid>
      <description>终于想起自己还有一个公众号，也是有两个月没更新了，感谢还关注的各位。
今年4月份从上家公司离职，开启了跑路日志。
上家公司呆了快两年，以当前互联网平均跳槽频率，在一家公司两年基本算一个小老员工了，哈哈。
离职主要因为从去年底开始搞了一坨很傻逼的企业文化，快被恶心死了，终于是和几个同期同事一起跑路了。
然后就见证着同部门或者不同部门认识的人一个个的离开了，当然他们离开的原因就五花八门了。
离职的同事拉了一个离职微信群，群名和之前在职时部门群名称一样。后来，离职群里的人比在职的部门群人还多一点点，真是有够魔幻的。
当然这里面也隐藏了部分没离职的同事。
离开的时候，公司一直在裁员，后面把某城市的分部都裁光了，可惜走的时候部门没有裁员名额，看着别的部门认识的都是拿着n+1走的，着实有点酸。
出来的时候，杭州已经开始大面积裁员了。岗位属实不多。
别看Go这么火，出来找工作，在杭州，除了大厂，很少有Go相关的岗位。常年招聘也是那几家。其他公司Go相关的岗位基本都是区块链方向，不是区块链就是区块链，真的一言难尽。
当然这一切，菜才是原罪。
选择来现在这家，
第一不卷，之前在公司办公的时候，到点没多久就全跑完了。
没有大厂的体积，所以没有那么多条条框框，流程也没有那么繁琐。
最主要的一点就是可以支持远程办公！！！！
月初眼瞅着杭州的天气越来越热了，就申请远程办公了。
一段时间体验下来，
上班通勤时间没了，每天多了好多时间。
时间上相对自由，毕竟制定了okr，关注结果。
说实话，没人真正关心你什么时间干活。
不过我调整了作息，一般晚上11点睡觉，早上7点半起来，保持8小时睡眠。
而且早上时间基本没人会打扰，脑子也最清醒。
唯一不好的一点:沟通方面。虽然可以语音视频，但还是没面对面，嘴对嘴效果好。
尤其是项目涉及人员越多的情况下，沟通的效率就越低，对于这点，深有体会。
不知道各位今年行情咋样？
var ( userInfo magic.UserInfo ) userInfo.Email = &amp;ldquo;remember@qq.com&amp;rdquo; userInfo.PublicAddress = &amp;ldquo;remember2242&amp;rdquo;</description>
    </item>
    
    <item>
      <title>不定期更新的日常</title>
      <link>https://www.syst.top/lives/2022-04-16/</link>
      <pubDate>Sat, 16 Apr 2022 20:24:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/2022-04-16/</guid>
      <description>这个系列也好久没更新了，那就随便聊聊吧。
这段时间我在做什么？
总结下来就是，学英语、冥想、练习打字。
英语 英语这件事，还是特别重要的，在我心目中的分量排第一。
我记得刚参加工作那会，当时连qiang都没翻过，红到不能在红。
那时候只会百度，csdn常伴我身。遇到英文报错(哪来的中文啊)，只会把那一段连根复制到百度搜索，只要有答案出来，还思考个啥，使出cv大法。
跑通了:作者牛逼。
跑不通:傻逼作者。
更别提去官方文档查阅资料，去issues上看问题了。
当时凡事都先百度，xxx咋么、zzz如何&amp;hellip;&amp;hellip;。
虽然现在看的都是官网文档，偶尔看一些国外的技术文章以及感兴趣方向的论文，但是技术性的资料常常也带有些许垂直领域的标签。很多词都是一些专业通用术语，可能第一次你不知道，查询了一次，下次你就知道啥意思，看的多了，行业内的词汇量也就差不多了。
和日常英语还是有一丢丢不同的，
毕竟生活中的英语，单词范围更大，句子中还带有梗在里面，看不懂也听不懂，就像外国人看不懂中文一个道理。
我的英语确实不咋地。所以需要下功夫。不过还好，我觉得语言这方面，如果肯花精力，去刻意练习，提高英语水平也只是时间的问题。
不过得需要找到适合自己的最佳方式。
首先，语言学习我们都分为听、说、读、写对吧。如果你直接靠背单词入手，对于每一个单词，你得听它的发音，知道它的单词拼写，还得知道它的意思，最后自己要说出来。这就意味着相当于你一次性的去学习听、说、读、写这四个部分，还是基于没有上下文的环境下，效果就不用多说了吧。
我在油管看到Tinyfool老师的频道，他的观点是建立以听力为主导的英语学习的方式。
首先一定得先听懂别人在讲什么，你听懂了，会不会说是另一回事，至少你可以通过肢体语言回应对方。(我想了想等你已经听得懂别人说什么的时候，理论上多少能说一点)
但是如果你连听都听不懂别人说什么，你咋通过你的器官做出回应？靠fuck嘛？
所以听这是前置条件，我也十分认可。不然我实在想不通为啥国内英语考试第一部分一定是听力。
我现在的做法是，找到自己喜欢的一个播客，每一篇四分钟左右的语音，我会先听一遍，一般能听懂它的主题是啥，大概说了啥，有哪里是完全没听懂的。然后再看一遍原文，记录生词，看下完全没听懂的地方是在说啥，最后再重新听一遍。
要是第一遍连主题都没听懂的，一般就是完全不涉及的领域，全是领域专用词。
不知道你们都是如何学习英语的，希望留言区能分享，或者给点意见。
冥想 一年前的时候看过一点书，有尝试过，后面中断了。
前几周逛西溪的时候，老远看到一个小姐姐在那打坐冥想，我去的时候她已经在了，我站在远处呆了十几分钟，小姐姐一动不动，似乎进入状态。后面我就走了，很想问一句，她是睡着了吗？
回来的时候，自己当天就重新拾起冥想了。我是从一开始的5分钟到7分钟到10分钟到现在15分钟。
我的做法也很简单，每天固定时间(去除一切外部干扰，环境要安静),定个时间，就坐在床上，然后闭眼进入状态，我的注意力都在我的呼吸上。
冥想的一个困难点从我的感受来看在于注意力。在这短短的几分钟，你的注意力可能会转移到不同的场景中，我认为这是一种主观意识发生改变。所以当你的注意力发生转移，你需要的是立刻把它拉回来。
这段时间感受下来，冥想对我好处主要两点，
 获取内心的平静。 累的时候，花个十分钟左右的冥想，能让我恢复状态。  以上只是我对冥想浅浅的认知。
打字 啥？打字？
不怕你们笑话，我打字不是使用的标准指法，可能多少会有点影响，所以我想把它标准化。
别说，因为习惯的问题，短时间还真不好改，正在慢慢尝试改变。我主要在typingclub这个网站上，每天练习半个小时。
好了，这期的不定期更新的日常到这里就结束。欢迎一起讨论。</description>
    </item>
    
    <item>
      <title>Go netpoll大解析</title>
      <link>https://www.syst.top/posts/go/netpoll/</link>
      <pubDate>Thu, 14 Apr 2022 10:23:51 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/netpoll/</guid>
      <description>开篇 之前简单看过一点go原生netpoll，没注意太多细节。最近从头到尾看了一遍，特写篇文章记录下。文章很长，请耐心看完，一定有所收获。
用户空间和内核空间 在linux中，经常能看到两个词语:User space(用户空间)和Kernel space (内核空间)。
简单的说， Kernel space是linux内核运行的空间，User space是用户程序运行的空间。它们之间是相互隔离的。
现代操作系统都是采用虚拟存储器。那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核，保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。空间分配如下图所示：
Kernel space可以调用系统的一切资源。User space 不能直接调用系统资源，在 Linux系统中，所有的系统资源管理都是在内核空间中完成的。比如读写磁盘文件、分配回收内存、从网络接口读写数据等等。应用程序无法直接进行这样的操作，但是用户程序可以通过内核提供的接口来完成这样的任务。比如像下面这样，
应用程序要读取磁盘上的一个文件，它可以向内核发起一个 “系统调用” 告诉内核：”我要读取磁盘上的某某文件”。其实就是通过一个特殊的指令让进程从用户态进入到内核态，在内核空间中，CPU 可以执行任何的指令，当然也包括从磁盘上读取数据。具体过程是先把数据读取到内核空间中，然后再把数据拷贝到用户空间并从内核态切换到用户态。此时应用程序已经从系统调用中返回并且拿到了想要的数据，继续往下执行用户空间执行逻辑。
这样的话，一旦涉及到对I/O的处理，就必然会涉及到在用户态和内核态之间来回切换。
io模型 网上有太多关于I/O模型的文章，看着看着有可能就跑偏了，所以我还是从 &amp;laquo;UNIX 网络编程&amp;raquo; 中总结的5中I/O模型说起吧。
Unix可用的5种I/O模型。
 阻塞I/O 非阻塞I/O I/O复用 信号驱动式I/O(SIGIO) 异步I/O(POSIX的aio_系列函数)  阻塞I/O 阻塞式I/O下，进程调用recvfrom，直到数据到达且被复制到应用程序的缓冲区中或者发生错误才返回，在整个过程进程都是被阻塞的。
非阻塞I/O 从图中可以看出，前三次调用recvfrom中没有数据可返回，因此内核转而立即返回一个EWOULDBLOCK错误。第四次调用recvfrom时已有一个数据报准备好，它被复制到应用程序缓冲区，于是recvfrom成功返回。
当一个应用程序像这样对一个非阻塞描述符循环调用recvfrom时，我们通常称为轮询(polling)，持续轮询内核，以这种方式查看某个操作是否就绪。
I/O多路复用 有了I/O多路复用(I/O multiplexing)，我们就可以调用 select 或者 poll，阻塞在这两个系统调用中的某一个之上，而不是阻塞在真正的I/O系统调用上。
上面这句话难理解是吧，说白了这里指的是，在第一步中，我们只是阻塞在select调用上，直到数据报套接字变为可读，返回可读条件，这里并没有发生I/O事件，所以说这一步，并没有阻塞在真正的I/O系统调用上。
其他两种就不过多介绍了。
还有一点，我们会经常提到同步I/O和异步I/O。
POSIX 把这两种术语定义如下:
 同步I/O操作(synchronous I/O opetation) 导致请求进程被阻塞，直到I/O操作完成。 异步I/O(asynchronous opetation) 不导致请求进程被阻塞。  基于上面的定义，
异步I/O的关键在于第二步的recrfrom是否会阻塞住用户进程，如果不阻塞，那它就是异步I/O。从上面汇总图中可以看出，只有异步I/O满足POSIX中对异步I/O的定义。
Go netpoller Go netpoller 底层就是对I/O多路复用的封装。不同平台对I/O多路复用有不同的实现方式。比如Linux的select、poll和epoll(具体差别不是很明白可以看这篇)。在MacOS则是kqueue,而Windows是基于异步I/O实现的icop&amp;hellip;&amp;hellip;，基于这些背景，Go针对不同的平台调用实现了多版本的netpoller。
下面我们通过一个demo开始讲解。
很简单一个demo，开启一个tcp服务。然后每来一个连接，就启动一个g去处理连接。处理完毕，关闭连接。
而且我们使用的是同步的模式去编写异步的逻辑，一个连接对应一个g处理，极其简单和易于理解。go标准库中的http.server也是这么干的。</description>
    </item>
    
    <item>
      <title>《软件架构设计》读书笔记</title>
      <link>https://www.syst.top/readings/go-concurrency-2021-04-20/</link>
      <pubDate>Sat, 19 Mar 2022 08:42:10 +0800</pubDate>
      
      <guid>https://www.syst.top/readings/go-concurrency-2021-04-20/</guid>
      <description>之前说过，会分享一些看书笔记。 前段时间，大佬同事推荐了一本书，书名叫《软件架构设计:大型网站技术架构与业务架构融合之道》,特做一些笔记分享。
这本书整体分为五个部分。
 什么是架构 计算机功底 技术架构之道 业务架构之道 从架构得到技术管理  围绕这五个部分总计17章节。
接下来，我会分享部分我感兴趣的章节。
第一部分：什么是架构？ 一句话:架构是针对所有重要问题做出的重要决策。
不同公司或者相同公司在不同的阶段所面临的问题不同，架构自然也会有所不同。
个人认为，不存在称之为完美的架构，只会存在最适合的。面对的场景，着重的目的不同，那么相应的决策也会不同(有点废话)。
架构的分类。 作者从技术的角度，把软件从底向上分层，做了架构的分类。
第一层:基础架构 基础架构指的是云平台、操作系统、网络、存储、数据库和编译等。
第二层:中间件和大数据平台 中间件，例如分布式服务中间件、消息中间件、数据库中间件、缓存中间件等。
第三层:业务系统架构  通用软件系统。例如常用办公软件、播放器。 离线业务。比如各种基于数据的离线计算、数据挖掘。 大型在线系统。比如电商、广告、搜索、推荐、ERP或者CRM等。  整体就像这样, 从上面你也可以看出，只有大厂这三层都有。像小公司可能只有第三层，或者小量的第二层。 印象里，我前司是没有第一层的，第二层是有的。
一般情况下，每一层都会有专门的人去干活。比如第二层会有专门的中间件部门， 对应又分为几个组，每个组负责对应的中间件开发。
业务部门在第三层，一般情况下，他们只负责业务的curd，如果有场景需要用到一些中间件时， 这时候通常会去找负责中间件的人对接，使用他们的sdk等。(ps:好不好用那就是另外一回事了)
还有一个有意思点，作者在书中提到架构的道与术。
什么是架构的道?
抽象点说，对于技术问题，主要是指高并发、高可用和一致性方面。对于业务问题，主要指业务需求分析和建模。 那么，我们在面对这些问题的时候， 是通过大量的业务系统实践，在实践基础上进行的思考和总结，进而提炼出的一些方法论，这就是道。
更具体的的说，比如，
 数据库如何分库分表？ 分库分表的时机如何确定？ 缓存一致性问题如何解决？ 如何拆分服务？ &amp;hellip;&amp;hellip;  等等问题，这些问题解决方案并不是凭空出现的，而是通过大量的实践落地进而总结产生的一套解决方案核心思路。
所以道很多时候是&amp;quot;虚&amp;quot;的东西，越虚意味着就越抽象，如果两个人在讨论某个问题，而对一些专业理论的认知还未处于同一水平上，那听起来就只能离谱了。
所以要讲道之前，得先有术。术就是指对应具体的语言，框架或者中间件使用姿势。这些都是比较具体的东西，实操性强，方面大家理解。
架构的道和术，都不能偏废，一方面需要不断实践(术)，在实践中深入原理。进而把实践的东西抽象，总结出来，形成方法论(道)。 不断的用道来指导新的术，在新的术中再总结出新的道，如此循环往复。
以上是第一部分内容。
第二部分：计算机功底 主要讲解的是术。计算机功底、语言、框架、网络、数据库、操作系统等。
印象最深刻的是框架那一章。作者提到，熟悉一个框架之后，更多的是应该去关注它的缺点，而不是优点。更应该关注它不能做什么，而不是它能做什么。 它不能做什么往往是别的框架的改进点。
细想，如果你不关注它不能做什么，在你们拍板决定使用框架时，做了一半发现， 核心的一块需求它支持不了，这时候只能欲哭无泪了。
第三部分：技术架构之道 主要讲解的是道。 里面分为:
 高并发问题 高可用与稳定性 事务一致性 多副本一致性 CAP理论  因为这一部分主要是关于道方面的，所以很多地方是抽象化的。读者在读这一部分时候，针对一些问题的解决方案，需要自行去思考部分细节。</description>
    </item>
    
    <item>
      <title>一个用go实现的有限状态机 </title>
      <link>https://www.syst.top/posts/go/easyfsm/</link>
      <pubDate>Sun, 06 Mar 2022 17:37:22 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/easyfsm/</guid>
      <description>easyfsm 之前看过新亮老哥的go-fsm-order，感觉还不错。最近在迁移项目的时候，发现有多处业务存在一些状态的流转，所以就基于go-fsm-order做了重改，让它可以在不同的业务场景下使用。
为什么不使用looplab/fsm，star挺多的啊。
不是特别喜欢，每次实例化fsm都需要重新传递对应events(虽然我们可以统一封装)，我更期望在项目启动时把此项目涉及到不同业务状态机流转注册到fsm，对应:不同业务-&amp;gt;[状态]-&amp;gt;[事件]-&amp;gt;处理事件主体(包含handler、params、hooks、observers等)。
当你开始进行状态流转时，只需要
fsm:=NewFsm(&amp;#34;业务名称&amp;#34;,&amp;#34;当前状态&amp;#34;) currentState,err:=fsm.Call(&amp;#34;事件名称&amp;#34;,&amp;#34;对应事件所需参数可选项&amp;#34;) 为什么需要区分业务？
因为绝大多数业务的状态值都是从数据库中获取的，比如订单表的订单状态，商品表中的商品状态，有可能值是相同的。
同一个业务同一属性对应状态值表达单一，不同业务下属性状态可能会出现值相同，但所表达的含义是不同的。
整体设计:
简单解释一下：
 业务:比如有商品状态业务、订单状态业务&amp;hellip;.. 状态：订单待付款、待发货&amp;hellip;. 事件：对应状态仅可达事件集合。比如待付款状态的可达事件仅有:支付事件和取消事件(取决于自己的业务) 执行事件主体：执行自定义的事件函数,如果有需要，还可以自定义执行事件前后hook，事件订阅者(比如支付事件发生后，异步通知用户等)  使用姿势 go get -u github.com/wuqinqiang/easyfsm 首先自定义业务、状态、事件。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/wuqinqiang/easyfsm&amp;#34; ) var ( // 业务 	businessName easyfsm.BusinessName = &amp;#34;order&amp;#34; // 对应状态 	initState easyfsm.State = 1 // 初始化 	paidState easyfsm.State = 2 // 已付款 	canceled easyfsm.State = 3 // 已取消  //对应事件 	paymentOrderEvent easyfsm.EventName = &amp;#34;paymentOrderEvent&amp;#34; cancelOrderEvent easyfsm.</description>
    </item>
    
    <item>
      <title>你还不体验泛型吗</title>
      <link>https://www.syst.top/posts/go/generics/</link>
      <pubDate>Sun, 02 Jan 2022 18:32:00 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/generics/</guid>
      <description>介绍 之前有看过官方发布的一些泛型文章，但是自己没动手玩过。还有没有没玩过的，那么最后一班车了。
不管学什么入门先从官网拿例子。
这段代码很简单，定义两个函数，计算对应传入的map值的和。两个函数最大的不同在于函数参数类型有所不同，一个map的值类型为int64,一个为float64，对应返回参数也有所不同。
在没有泛型的情况下，每种类型都不得不重新定义一个函数。
有人可能会说，上面的代码你可以这样写在一个函数里，
你确认这真的好吗？
泛型函数 但是，有了泛型之后，那就简单多了。
上面这段代码中，
定义了一个新函数SumIntsOrFloats，该函数声明两个类型参数 [K comparable, V int64 | float64]。其中K指定了类型必须为可比较(即可以用作比较符 == 和 !=)。因为 go中规定map的key必须是可比较类型。
比如，我们不能这样声明一个map。
所以这里的K就不能使用any关键字。
另一个V参数指定了一个约束，该约束由int64和float64组成，使用 | 指定了联合类型。
所以这里m参数为map[K]V类型，K,V即为参数类型指定的类型。
那么，如果你传入的map值的类型为其他类型。比如下面这种就不行了。
类型约束 上面看到的是我们在方法上对参数做一些约束。当然我们也可以直接声明类型约束。
上面的代码声明了一个Number用做类型约束的接口类型。在接口里声明int64和float64联合类型。
在SumNumbers中如果约束类型为int64或者 float64，那么只需要使用Number类型约束即可，就不用每个不同函数写 int64 | float64，达到代码复用的效果。
但是如果我这样，
我们把map中的值类型调整为自定义的otherInt64类型，otherInt64的基础类型也是int64。但是，这段代码编译会报错。
原因是 int64 约束会将其限制为只能是该类型，也就是只能是 int64，不能是基于此类型定义的其他类型。
如果想使用otherInt64咋么办，很简单，只需要一个～符号，
使用带～xxtype会将其限制为基础类型为xxtype的所有类型。
应用 上面只是简单介绍了一下使用姿势，那么哪些场景下可以使用泛型呢？
比如日常开发中，像slice、map、channel的一些处理函数，可能逻辑相同但是类型不同导致copy多个不同函数，这时候可以用泛型解决。比如，
还有一些行为方面的。比如 go 中的排序，通过泛型，不需要每一个结构都实现(Len，Less，Swap)三个方法，而是抽象出依赖于三个方法的行为。那么想要实现排序只需要依赖定义的这个抽象就行了。
其他方面的应用可以自行体验。
总结 这篇文章主要带你们体验下泛型的基本使用，以及对应的类型约束，最后还简单实验了两个泛型的场景demo，感兴趣的可以自行体验。更多内容，欢迎留言区域交流。
附录  https://go.dev/doc/tutorial/generics https://teivah.medium.com/when-to-use-generics-in-go-36d49c1aeda https://github.com/mattn/go-generics-example  </description>
    </item>
    
  </channel>
</rss>
