<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记得</title>
    <link>https://www.syst.top/</link>
    <description>Recent content on 记得</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 27 Jul 2021 10:01:52 +0800</lastBuildDate><atom:link href="https://www.syst.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>超实用的 gRPC 客户端调试工具</title>
      <link>https://www.syst.top/posts/go/grpc/</link>
      <pubDate>Tue, 27 Jul 2021 10:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/grpc/</guid>
      <description>介绍 正好看到董泽润老哥写了一篇关于使用 WireShark 分析 gRPC 流量的文章，学到了。
那我就介绍两个日常开发使用过的两款 gRPC 客户端调试工具吧。
Evans Evans 有两种模式：REPL 和 CLI。比起其他 gRPC 客户端,更具有表现力。并且它还支持自动补全功能。
它的安装非常方便，在 Mac 上我们只需要执行以下两行命令即可。
$ brew tap ktr0731/evans $ brew install evans 我们来操作一下 REPL 模式。
首先我们需要有一个 pb 文件，假设你的文件在 api/api.proto，我们只需要这样： 默认地址为 127.0.0.1:50051，当然你可以通过 --host 和 --port 来指定服务器。 上图的命令:
 show package 读取 pb 包名， show service 显示对应服务列表。 call xxx 调用 grpc 服务&amp;hellip;&amp;hellip; &amp;hellip;..  更多命令可自行查阅官网。
除了上述这种直接引入 pb 文件外，我们还可以通过 gRPC 反射包(reflection)， 将 grpc.Server 注册到反射服务中, 这样的话，就可以通过 reflection 提供的反射服务查询到对应的 gRPC 服务或者调用 gRPC 服务。</description>
    </item>
    
    <item>
      <title>go并发-工作池模式</title>
      <link>https://www.syst.top/posts/go/worker-pool/</link>
      <pubDate>Thu, 01 Jul 2021 23:37:45 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/worker-pool/</guid>
      <description>开篇 之前写过一篇文章，它有个响亮的名字: Handling 1 Million Requests per Minute with Go。 这是国外的一个作者写的，我做了一篇说明。起的也是这个标题， 阅读量是我最好的一篇，果然文章都是靠标题出彩的&amp;hellip;..
今天偶然看到另一篇文章(原文在文末)。两篇文章原理相似:有一批工作任务(job)，通过工作池(worker-pool)的方式，达到多 worker 并发处理 job 的效果。
他们还是有很多不同的点，实现上差别也是蛮大的。
首先上一篇文章我放了一张图片，大概就是上篇整体的工作流。  每个 worker 处理完任务就好，不关心结果,不对结果做进一步处理。 只要请求不停止，程序就不会停止，没有控制机制，除非宕机。  这篇文章不同点在于:
首先数据会从 generate (生产数据)-&amp;gt;并发处理数据-&amp;gt;处理结果聚合。 图大概是这样的, 然后它可以通过 context.context 达到控制工作池停止工作的效果。
最后通过代码，你会发现它不是传统意义上的 worker-pool，后面会说明。
下图能清晰表达整体流程了。 顺便说一句，这篇文章实现的代码比 Handling 1 Million Requests per Minute with Go 的代码简单多了。
首先看 job。
package wpool import ( &amp;#34;context&amp;#34; ) type JobID string type jobType string type jobMetadata map[string]interface{} type ExecutionFn func(ctx context.Context, args interface{}) (interface{}, error) type JobDescriptor struct { ID JobID JType jobType Metadata map[string]interface{} } type Result struct { Value interface{} Err error Descriptor JobDescriptor } type Job struct { Descriptor JobDescriptor ExecFn ExecutionFn Args interface{} } // 处理 job 逻辑,处理结果包装成 Result 结果 func (j Job) execute(ctx context.</description>
    </item>
    
    <item>
      <title>如何优雅地实现并发编排任务</title>
      <link>https://www.syst.top/posts/go/test-tip/</link>
      <pubDate>Tue, 29 Jun 2021 07:44:45 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/test-tip/</guid>
      <description>开篇 在
场景1：调用第三方接口的时候， 一个需求你需要调用不同的接口，做数据组装。 场景2:一个应用首页可能依托于很多服务。那就涉及到在加载页面时需要同时请求多个服务的接口。这一步往往是由后端统一调用组装数据再返回给前端，也就是所谓的 BFF(Backend For Frontend) 层。
针对以上两种场景，假设在没有强依赖关系下，选择串行调用，那么总耗时即:
time=s1+s2+....sn 按照当代秒入百万的有为青年，这么长时间早就把你祖宗十八代问候了一遍。
为了伟大的KPI，我们往往会选择并发地调用这些依赖接口。那么总耗时就是:
time=max(s1,s2,s3.....,sn) 当然开始堆业务的时候可以先串行化，等到上面的人着急的时候，亮出绝招。
这样，年底 PPT 就可以加上浓重的一笔流水账:为业务某个接口提高百分之XXX性能，间接产生XXX价值。
当然这一切的前提是，做老板不懂技术，做技术”懂”你。
言归正传,如果修改成并发调用，你可能会这么写，
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main() { var wg sync.WaitGroup wg.Add(2) var userInfo *User var productList []Product go func() { defer wg.Done() userInfo, _ = getUser() }() go func() { defer wg.Done() productList, _ = getProductList() }() wg.Wait() fmt.Printf(&amp;#34;用户信息:%+v\n&amp;#34;, userInfo) fmt.Printf(&amp;#34;商品信息:%+v\n&amp;#34;, productList) } /********用户服务**********/ type User struct { Name string Age uint8 } func getUser() (*User, error) { time.</description>
    </item>
    
    <item>
      <title>傻瓜式的我们</title>
      <link>https://www.syst.top/lives/about-everything/</link>
      <pubDate>Sun, 06 Jun 2021 23:49:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/about-everything/</guid>
      <description>为什么写这篇文章。
现代的信息流在消磨着我。还有我自己也在自我内耗中。
 一天要看多少次手机？ 认真工作的时候被手机打断或者自己工作两分钟时不时拿出手机？ 每天被多少垃圾信息推送？看到消息都忍不住点一下？ 完全没有自己的思考，只剩下无情的消息接受者。宛如行尸走肉 焦虑、沉不住气，每一个都想学，也每一种都没精。列出计划。  针对以上问题,
 杜绝工作时看手机，或者给每日处理手机的时间段，消息的处理也一样。 拒绝强迫症，不要点开消息。 对待问题，除了解决，海西要思考背后原理。 淡定淡定。一步一个脚印，多看别人源码。  </description>
    </item>
    
    <item>
      <title>leetcode 337 House Robber III</title>
      <link>https://www.syst.top/leetcode/337-house-robbe-riil/</link>
      <pubDate>Mon, 31 May 2021 00:36:26 +0800</pubDate>
      
      <guid>https://www.syst.top/leetcode/337-house-robbe-riil/</guid>
      <description>题目介绍 这是 House Robber III。
这道题和之前两个版本最大不同在于引入了二叉树。 树的每个节点(具体的房子)都有对应的值(金额)。每个节点有两种状态，偷或者不偷。 规则是不能同时偷父子节点， 比如上图，如果选择偷 A 节点，那么 B 和 C 就不能偷，既然 B 和 C 不能偷，那么 DEFG 就可以偷的。 因为 DEFG 和 A 是子孙关系，而不是父子关系。
这样的背景下，求小偷能偷的最大金额?
暴力递归 我们还是用上图的那个例子。我们可以直接求出最大金额,伪代码如下
/** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ // 求当前A节点能偷的最大金额res // 伪代码 item := node.Val + node.Left.Left.Val + node.Left.Right.Val + node.Right.Left.Val + node.Right.Right.Val res := max(item, node.</description>
    </item>
    
    <item>
      <title>leetcode 213 House Robber II</title>
      <link>https://www.syst.top/leetcode/213-house-robbe-rii/</link>
      <pubDate>Sun, 16 May 2021 00:17:52 +0800</pubDate>
      
      <guid>https://www.syst.top/leetcode/213-house-robbe-rii/</guid>
      <description>介绍 这是 House Robber II，也就是 I 的变型版本。II 和 I 的最大区别在于 II 把房子围城一个圈了. 你可以理解成环形链表。这样对小偷打击还是蛮大的，这意味着第一幢房子和最后一幢房子是紧挨着的。不能同时偷。 之前我们提到，相邻两家不能同时偷。如果只有一家，那么根本构不成相邻的条件，就偷唯一的那户人家。 如果有两家，那么偷的必然是两家中钱多的那家。
那如果总数大于 2 家呢？
对于第 n 家来说，只有两种选择:偷或者不偷。
是咋么计算出当前这家是否要偷的呢。
我们假设当前这家编号为 n,那么
max(我偷第 n 家的钱 + sum(截止第 n-2 家偷的钱), sum(截止第 n-1 家偷的钱，因为既然 n-1 家偷了，那么 n 必然是不能偷了))。
这才是这道题关于动态规划最核心的一个点。
看懂了吗？没看懂也没关系，手把手摸个图片出来。 还没看懂，加我微信 remember_wuqinqiang 我告诉你。这里顺便打个广告，没加我好友的赶紧加我好友。
最后，还需要考虑一个问题，如何确保偷了第一家就不偷最后一家，偷最后一家就不偷第一家。 很简单，直接定义两个dp，一个范围不包括第一家，一个范围不包括最后一家。 最后我们变成了求:
// 伪代码 最佳偷钱:=max(dp[不包括第一家],dp[不包括最后一家]) 那么剩下的就是对两个dp的状态转移公式了。
func rob(nums []int) int { n := len(nums) if n == 0 { return 0 } if n == 1 { return nums[0] } dp1, dp2 := make([]int, n), make([]int, n) dp1[0] = nums[0] dp1[1] = max(dp1[0], nums[1]) dp2[0] = 0 //dp2 不算第一家了 	dp2[1] = max(dp2[0], nums[1]) for i := 2; i &amp;lt; n; i++ { if i &amp;lt; n-1 { // dp1 不算最后一家 	dp1[i] = max(dp1[i-1], dp1[i-2]+nums[i]) } else { dp1[i] = dp1[i-1] } dp2[i] = max(dp2[i-1], dp2[i-2]+nums[i]) } return max(dp2[n-1], dp1[n-1]) } func max(x int, y int) int { if x &amp;gt; y { return x } return y } 其实代码还能更简洁。</description>
    </item>
    
    <item>
      <title>如何成为一个更好的开发者</title>
      <link>https://www.syst.top/lives/to-better/</link>
      <pubDate>Sun, 09 May 2021 12:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/to-better/</guid>
      <description>真正的成功者是在练习中慢慢积累起来的。
你在看大佬文章的时候，也许已经意识到了这一点。看到他们在做的一些事情，你就会想:
我不知道这个人为了实现目标付出了多少努力。
编码也不例外。如果你想要成为一个顶尖的工程师，你必须时刻地练习你的技能。
我主要会这么做。
目标 这是个人的信念，它也许能引导着我的一生。无论是从个人的角度还是从职业生涯，我们总是需要每个阶段为自己设置一个的目标，然后去干掉它。
比如，你可以:
  创建一个你一直想要创建的应用程序。
  认真看完一本你想看的书并进行独立的输出和思考。
  学习一门自己感兴趣的语言，通过它实现一个功能也好，还是把之前老项目重写。
  列举公司项目或者自己项目中的缺陷、痛点，通过思考、查阅资料、设计方案、落地完善系统。(别和我吹牛你的系统没问题)
  参与开源
  &amp;hellip;&amp;hellip;
  定目标的时候，不要太过于抽象，最好是一个可视化的目标。
另外设置目标的难度应该是超过当前能力范围，但是这个幅度不能过大，否则会脱离实际意识，我们就会称之为:劝退师。
如果目标很庞大，那么就需要进行拆解，就和我们系统模块一样，可以进行划分。目标也一样，可以进行拆分。设置一个总周期，那么相应的，阶段任务也就出来了。
更重要的是这个过程，过程才是目标的意义所在。结果只是意料之中的附属品。你永远也不知道这个过程能给你带来什么？打通任督二脉也不是不可能。
有些话我还是挺喜欢的。种一棵树最好的时间是十年前，其次是现在。
对于编程来说，空想是最没用的，一定得通过不断的练习。另外，延迟满足感是一件很重要的事情，当你觉得自己越来越菜的时候，可能是你越来越强的时候。
为什么是可能呢？
因为，也许你是真的菜。
我记得初入职场的时候，忘记实现了一个什么功能性的东西，那时候觉得自己好牛逼，现在我只想说：草率了。
输出 在实现目标的同时，一定会遇上自己不会的，从不会到会到熟练掌握存在一个过程，它也是一个个阶段。每一个阶段你都需要去总结分析你所学到的技能，如何知道自己的掌握程度？那一定是输出。输出的方式很多，比如:
单纯写 blog 给自己看，但是只存在自己的认知。
社区写文章分享。帮助别人的同时，可能有人能指出你的问题，或者提供了不一样的角度。
通过掌握的知识点写程序或者应用到实际项目中。
组内分享。
开源社区线下分享。(估计已经是大佬级别了)
多看书多阅读开源代码 目前公众号内卷比较严重，加上你看别人的文章都是别人学习、吸收、总结的最终产物。对于某个不了解的知识点，还是需要先看一手的资料。在这个基础上，回头看作者的文章，也许会有不一样的体会。
另外一篇文章由于篇幅限制或者侧重点的选择，往往会比较片面。这时候更应该看书了。你能吸动 &amp;laquo;TCP/IP详解&amp;raquo;的书，你看不懂别人写的阉割版 TCP/IP 文章？
至于源码，我觉得得从实际出发，比如项目中使用到的优秀库或者最近任务涉及到的技能想看别人的实现。整体架构？底层原理？设计细节？为什么要这样设计？只有了解底层原理，用起来才能更加舒心。从使用到原理，说不定后面有对应的需求，还会进行扩展，提交 PR，一举成为 Contributor。
总结 编码不是彩票，并不能一夜暴富。它是一个缓慢的过程，如果你能每天坚持向着目标学习，也许短时间你看不到任何可视化的效果。但是一年，两年&amp;hellip;..，当你回头想想一年前的自己是不是个傻逼，你就看到成长了，话糙理不糙。
仅以此篇献给我自己，也献给迷茫的你。</description>
    </item>
    
    <item>
      <title>每个人都有自己的路要走 </title>
      <link>https://www.syst.top/lives/every-one/</link>
      <pubDate>Tue, 04 May 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/every-one/</guid>
      <description>这个五一，我回家了。主要原因是其中一个比我大三岁的发小结婚了。
说起发小，我的发小圈和别人可能不太一样。本质上我有两波发小，这主要是取决于我的成长背景。
我一岁的时候，由于爸妈要外出打工，就把我带到了阿姨家，委托阿姨来照顾我。这一照顾，就是五六年。上幼儿班的时候，我教书的大伯把我带回到自己家，不过一放暑假或者寒假的时候，我都会去阿姨家一呆就是上月，每次都需要爸妈生拉硬拽拖我回家。
这种背景下，就导致我发小变成了两波，一波是平时上学自己家这边的，一波就是放假阿姨家那边的。
阿姨自己有两个孩子，一个比我大七岁左右(哥哥)，一个比我大十来岁(姐姐)。很难想象当时阿姨是咋么把我们带大的。
阿姨家那边的发小主要是阿姨夫兄弟们的孩子加上他们村的玩伴。为了方便下面的讲述，暂且先标注他们的小名吧。主要有小革、小萍、小宇、小遥以及小伟。
什么叫发小？什么叫青梅竹马？我只能说，电视剧里演的发小场景都是弟弟。
小时候我们真的啥都干过，某些场景至今记忆犹新。印象最深刻的还是老哥(阿姨的孩子)初中的时候，大概考了个位数的成绩，而且还在学校惹事了。那一次老师直接带着我哥从学校回来，准备直接家访。
当时我阿姨不在家。然后老师写了一封信(小时候农村还真没手机)以及我哥的成绩单留下，并告知我们家长回来的时候把这些交给他们。然而我哥一直在旁边给我们打手势，意思就是等他们走后把这些都烧了。然后我、小萍以及小革真的在老师走后把信和成绩单烧了个精光，这件事给我留下了深刻的印象。
有点扯远了，继续介绍发小，我们从年纪大的开始说起。
小伟的年纪应该是最大的，比我大5岁左右，目前也是两个孩子的父亲。我记得我读初中的时候他已经是个高中生了。小伟也是这里面我最生疏的一个。在我高中之后就再也没联系了。过年去阿姨家拜年的时候也没见到。昨天简单的交流下，他毕业后一开始从事 python 开发，后来转型做了安全方面的工作。由于这个是最生疏的，所以了解的不是很多。
接下来是小萍。小萍是这里面唯一的异性。
小萍大我四岁，我读初中的时候她刚好初中毕业。从小对小萍的印象还是很深刻的。作为女孩子，从小没见过她留过长发。一手利落干脆的短发，看起来很清爽。小时候我和她经常吵架，她的言语很犀利，有时候就算是大人也会被气到。记忆中，小萍毕业后先是在银行柜台干过几年，后面出来自己捣鼓网店，这几年听说赚了不少钱。但是为人很低调，偶尔会在朋友圈发一些美食周边的东西。
接下来就是本次结婚的主人公，小革。
小革比我大三岁，在我高中的时候就去当兵了。当兵的末段家里给他在县城买了一套房子，当兵出来后， 19 年左右去了杭州，后面经人介绍认识了现在的女朋友，当然女朋友也是我们那的。19年6月份的时候，去他们租住的房子里吃过一段饭，那时候他在一家教育机构工作，岗位应该类似销售的形式，直到现在还在这家公司。20年的时候把县城房子卖了在杭州上了车，年初看房的时候，特意去他家里看了看，后面还是没选择买在他家附近，因为离我现在上班不是很方便。
接着小遥。小遥是我们这其中两个学霸之一。
小遥和小革是同龄，和小革是小学同学以及初中同学。长得很斯文，偏瘦。性格和我相似，比较偏内向。之前微信上有聊过，但是真的好几年没见过面了。昨天我到小革家的时候，他说马上就来了。在他来之前，小萍对我说，等他来了，你肯定认不出来。
事实也的确如此，整个人比以前大了一圈，所以容貌上有所改变。但是，依稀能从中寻找出以前的模样。
小遥高中就读于县里的重点高中。本科也是重点大学，本科之后又继续读了研究生。研究生毕业后来到杭州，目前在四大行之一做系统开发。
我很好奇在银行开发和互联网公司有什么不一样？然后就有了以下部分对话。
 我:平常在银行上班996吗? 小遥:我们平常不加班，很少很少情况下会加班。一般都是到点就走。(此处一万多点暴击) 我:你们银行系统是不是都是 Java 写的？ 小遥:是的。而且技术栈一般都比较老，还夹杂着一些内部自研的东西。很少会引入新技术。 我:因为你们关注的是系统的稳定性。 小遥:除了系统的稳定性，还有安全也特别重要。一般我们一个需求开发周期都是数月，不会像你们互联网那样，一周好几个迭代版本。 我:那平常你们提交代码，会有严格的 code review 吗？ 小遥:其实还好吧。除了一开始入职的时候可能会有，后面也没有那么严格吧。 &amp;hellip;&amp;hellip; 后面他就帮忙去了，因为和小革完全是同辈发小，所以他得端两天的菜。我吃完的时候问他，端菜累吗？他把围裙脱下来，给我说你来试试。我回了一句，我是客人，哈哈。  最后一个是小宇，小宇是我们这年纪最小的(98年)，我倒数第二。
当然，小宇的学习成绩也是我们这最好的。
小宇高中的时候也就读于小遥的那所重点高中，不过不同的是，高考的时候，小宇是当年我们县的文科状元。后面就读于一所 985&amp;amp;211 院校。不过文科的专业就业确实是门学问。他自己本身又不喜欢公务员的工作，然后在大一的时候就去报名考取注册会计师的证书(听说这个证书每年都能额外领到数目不小的钱)。
小宇毕业后，也来到杭州(大家都在杭州的原因之一是:杭州是离衢州最近的一个(准)一线城市)，目前在杭州一家会计事务所工作，还有一个谈了五年左右的女朋友，简直是人生赢家。
不过他比较有意思。我和他聊的时间比较长。
他说过最让我印象深刻的一句话是:我这个人，特别喜欢和别人比较。
我没有反驳他。但是看过我公众号的人都知道，我是最反对这句话的，人为什么一定要和别人比？
下面是和他的部分对话:
 我:你日常工作996吗？ 小宇:996？事务所里日常007状态，真的太忙了。 我:那我日常995，007感觉自己是个机器，没有时间停下来思考。 小宇:其实我也后悔过，当初大一的时候没转计算机专业，那时候也没这方面的意识，身边也没认识这样的人。如果当初没有把注册会计师考下来，我可能在毕业的时候什么都没。 我:也许当初转了你也后悔。可是，你现在也能转啊。 小宇:现在我觉得太晚了。 我:你98还怕晚？ 小宇:我证书都考下来了。现在我觉得，假如路有100米，我觉得我已经走了40米，很难回头换路了。 我:那你当初没想过考研吗？ 小宇:当初有想过，但是能考什么？我看了半天，也不知道能考哪个方向。文科专业就业性确实不太行，以至于公务员是大部分人的归宿。 那你打算这条路走下去了？没打算考公务员吗？  目前规划是这样的。不过杭州给我的感觉压力很大，老实说，要不是身边有女朋友，我还真不知道能不能坚持下去。女朋友在身边，压力大的时候，至少还有一个人能说话。至于公务员，可能只是 plan B。 &amp;hellip;&amp;hellip; 以上就是昨天和发小们的一些对话。也只有在这种场合下才能凑齐全部的人，尽管早已没了当年的乐趣。 最后，想对着我那些发小说一句:</description>
    </item>
    
    <item>
      <title>iota 在 Go 中的使用 </title>
      <link>https://www.syst.top/posts/go/enum/</link>
      <pubDate>Sun, 25 Apr 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/enum/</guid>
      <description>介绍 Go 语言实际上没有直接支持枚举的关键字。一般我们都是通过 const + iota 实现枚举的能力。
有人要问了，为什么一定要使用枚举呢？stackoverflow 上有一个高赞的回答，如下:
You should always use enums when a variable (especially a method parameter) can only take one out of a small set of possible values. Examples would be things like type constants (contract status: &amp;quot;permanent&amp;quot;, &amp;quot;temp&amp;quot;, &amp;quot;apprentice&amp;quot;), or flags (&amp;quot;execute now&amp;quot;, &amp;quot;defer execution&amp;quot;). If you use enums instead of integers (or String codes), you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use.</description>
    </item>
    
    <item>
      <title>推荐两款go开发中提高效率工具</title>
      <link>https://www.syst.top/posts/go/go-tool/</link>
      <pubDate>Sun, 25 Apr 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/go-tool/</guid>
      <description>介绍 推荐两款 go 开发中用的还行的工具。
为什么推荐工具？是为了让评论区的大佬介绍其他更好用的工具，解放我的双手。
顺便问问，有没有关说话就能自动打完代码的工具？
JSON-To-Stuct 这个工具可以把 json 格式的数据转换成 go 的 struct。这样的话比如你在对接第三方的时候，就不需要根据对方的接口一个个定义 struct 字段，就像下面示例一样,直接复制微信小商店订单 json 数据到网站的左框即可,当然自己还是需要做一些局部的调整。
其实这个功能21年新版的 goland 也支持了。在 goland 中你只需要这样,
Table-To-Stuct 被业务缠身的同学每天免不了 CURD。CURD 之前总得建表吧。建表之后总得在代码中定义模型吧。总不能又一个个字段定义过去吧，那么下面这个工具可能管用。
假设你有一个库 dream，有一个表 category，结构如下，
CREATE TABLE `category` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `name` varchar(20) NOT NULL DEFAULT &amp;#39;&amp;#39;, `parent_id` int(11) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39;, `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`), UNIQUE KEY `name` (`name`) ) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4; 你只需引入包 github.</description>
    </item>
    
  </channel>
</rss>
