<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记得</title>
    <link>https://www.syst.top/</link>
    <description>Recent content on 记得</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 08 Dec 2021 22:25:52 +0800</lastBuildDate><atom:link href="https://www.syst.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Myfriends</title>
      <link>https://www.syst.top/friends/friends/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.syst.top/friends/friends/</guid>
      <description></description>
    </item>
    
    <item>
      <title>那些用Go实现的分布式事务框架</title>
      <link>https://www.syst.top/posts/go/transaction/</link>
      <pubDate>Wed, 08 Dec 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/transaction/</guid>
      <description>开篇 不知不觉竟然一个月没更新了，人一旦懒下来只会越来越懒。
最近对分布式事务产生了一些兴趣，查阅了一些文章以及论文。这篇文章主要介绍我看的两个项目，不涉及一些理论知识。
 阿里开源版本的Seata，主要看了Go实现的seata-golang(落后java版) 以及前段时间很多公众号都发的dtm。  Seata简介 Seata是由阿里开源的分布式事务服务，目前为用户提供了AT、TCC、SAGA、XA的事务模式，整体采用的是两阶段提交协议。Go版的seata-golang 目前好像只实现了mysql的AT、TCC模式，作者现在不咋更新了。
Seata 有几个核心角色：
 TC(Transaction Coordinator) -事务协调者。(维护全局和分支事务的状态，驱动全局事务提交或回滚) TM(Transaction Manager)-事务管理器。(定义全局事务的范围：开始全局事务、提交或回滚全局事务。) RM(Resource Manager)-资源管理器。(管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚)  当然这样看，可能还不是很理解，我拿一张官网的图加以解释。
从上图中可以看出，这三个角色所负责的工作如下，
TC
 维护全局和分支事务状态，需要进行存储。 当一个分布式事务处理结束，需要通知到每个RM是commit还是rollback。  TM
 向TC请求开启一个分布式事务，得到一个全局唯一的分布式id。 根据每个参与分布式事务的RM一阶段的反馈，决定二阶段向TC请求此次分布式事务是commit还是rollback(绝大部分场景下，一阶段任一RM失败，本次分布式事务失败)  RM
说的白一点就是管理参与分布式事务的各个服务(比如经典下单场景中涉及到的:订单服务、库存服务、营销服务等)
ps:个人感觉，这里的RM有点类似微服务中的中间处理层(专业术语他们管这叫bff-&amp;gt;backend for fronted)。
  一阶段 prepare 行为(主动)：每个RM调用 自定义 的 prepare 逻辑。
  二阶段 commit 行为(被动触发)：如果本次分布式事务第一阶段全部RM成功，TC处理完自身状态变更后，调用各个RM自定义 的 commit 逻辑。(一阶段RM全部成功)
  二阶段 rollback 行为(被动触发)：如果本次分布式事务第一阶段任一RM失败，TC处理完自身状态变更后，调用各个RM自定义 的 rollback 逻辑。(一阶段任意RM失败)
  好了。下面可以看看seata-golang 实现的一些细节了，seata-golang 底层采用gRPC进行通信。
seata-golang 我们先看RM部分结构。</description>
    </item>
    
    <item>
      <title>那些用Go实现的分布式事务框架(2)</title>
      <link>https://www.syst.top/posts/go/transaction2/</link>
      <pubDate>Wed, 08 Dec 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/transaction2/</guid>
      <description>开篇 上一篇我们主要介绍的是seata-golang。一个对标seata的go语言实现，当然版本还是落后Java版很多的。
这次我们来介绍一下另一个go实现的分布式事务:dtm。
首先来看下dtm整体架构图(来源官网)。
再来看之前的seata架构图。
从架构上来看，大差不差。
seata中的TC对标dam的TM。
RM两边意思一致。
seata中的TM对标dtm事务SDK。作用都是一样:第一阶段开启一个全局事务,执行各RM分支事务，第二阶段根据RM第一阶段执行结果，决定调用TC(seata)|TM(dtm) commit或者rollback。
架构上，个人感觉只是因为模块名称以及图画不一样的差别。
当然在实现细节上还是有很大差别的。
我们先简单介绍下DTM各个模块。
TM TM 层在代码中是没有具体的主体结构的，开始都是函数之前的调用。
启动TM实际上开启了两个服务，http以及grpc这两个服务。
// StartSvr StartSvr func StartSvr() { app := common.GetGinApp() app = httpMetrics(app) addRoute(app) dtmimp.Logf(&amp;#34;dtmsvr listen at: %d&amp;#34;, common.DtmHttpPort) go app.Run(fmt.Sprintf(&amp;#34;:%d&amp;#34;, common.DtmHttpPort)) lis, err := net.Listen(&amp;#34;tcp&amp;#34;, fmt.Sprintf(&amp;#34;:%d&amp;#34;, common.DtmGrpcPort)) dtmimp.FatalIfError(err) s := grpc.NewServer( grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer( grpc.UnaryServerInterceptor(grpcMetrics), grpc.UnaryServerInterceptor(dtmgimp.GrpcServerLog)), )) dtmgimp.RegisterDtmServer(s, &amp;amp;dtmServer{}) dtmimp.Logf(&amp;#34;grpc listening at %v&amp;#34;, lis.Addr()) go func() { err := s.Serve(lis) dtmimp.FatalIfError(err) }() go updateBranchAsync() // 省略代码 } http路由，</description>
    </item>
    
    <item>
      <title>&lt;&lt;不老奇事&gt;&gt;观后感</title>
      <link>https://www.syst.top/lives/bulaoqishi/</link>
      <pubDate>Sun, 07 Nov 2021 21:12:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/bulaoqishi/</guid>
      <description>今天刚好没事，看到了王传君的这部电影，过段买票去看了。
去之前以为这部片主题依旧是 “亲梅竹马”、“少时分离”、&amp;ldquo;长大偶遇&amp;rdquo;、&amp;ldquo;再续前缘&amp;rdquo;、“历经坎坷”、“最后遗憾”等等带有印象中各种标签的爱情片？
开头也确实和想象中相差无几。不过，中间画风突转太快。更多的是在探索生命的意义？电影中好多台词单独拿出来都是一条伤感唯美非主流的朋友圈。
其实电影的后半部分，对我来说，还是挺丧的。给我的总结是，在死亡面前，所有东西都毫无意义。
你不需要虚荣，不需要讨好他人，不需要带着一副面具伪装自己。</description>
    </item>
    
    <item>
      <title>channel原理解析(三)</title>
      <link>https://www.syst.top/posts/go/channel3/</link>
      <pubDate>Sun, 10 Oct 2021 21:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/channel3/</guid>
      <description>上一篇文章主要通过一个现实例子间接反映channel的一些原理。最后一篇开始介绍一些细节，会涉及到源码。
还是从一个简单的代码程序看起。
我们创建了一个无缓冲channel，然后往这个channel发送数据。因为程序中没有读操作ready，所以发送的时候会阻塞。我们通过汇编代码看它底层的调用。
从图中我们看到，上述发送操作，程序运行时实际调用的runtime.chansend1。
最终chansend1最终调用的还是chansend，chansend的第三个参数block是个bool值，表示操作channel不能立即成功时是否需要阻塞。
具体哪些操作？
 向无缓冲channel发送数据且当前无接收者ready。 接收无缓冲channel数据且当前无发送者ready。 缓冲channel已满，往channel发送数据。 缓冲channel为空，接收channel数据 向一个nil的channel发送数据。(注意，向一个nil的channel发送数据并不会引发panic)。 向一个nil的channel接收数据。  碰到上面的操作，如果不是特殊处理，我们的应用程序会被阻塞，直到被唤醒。
当然对于向nil的channel发送|接收数据，后续再也没机会被唤醒了。
那么如果是快速试错的场景，是不是只要把block改成false，在失败的场景下就不会被阻塞了。
编译这段代码。
可以看出，上面这段代码编译后调用selectnbsend最终发送动作调用的还是chansned，只是传入的block是false。这样一旦操作失败，程序不会被阻塞。
同理我们可以得出接收的调用动作。
到这里我们已经知道，
发送数据，最终调用的runtime.chansend。
接收数据，最终调用的runtime.chanrecv。
接下来我们来说明这两个函数底层是如何操作的。
我们还是以一个无缓冲的channel和缓冲channel来说明。
来看一段简单的程序。
值得一提的是，在Go中使用 go func的时候，本质上调用的是runtime.newproc创建一个g，然后把这个g交给调度器调度。至于什么时候g被调度，然后执行你的代码逻辑，那就要看调度器的&amp;quot;心情&amp;quot;了。
所以上面创建的两个g(暂且称为g1和g2)，可以看成是我们向调度器提交了两个任务g，我们无法保证哪个g会被先调度器调度执行，因此我们也不确定发送和接收这两个操作，谁会先被执行。
假设g1先被调度器运行，然后执行代码ch&amp;lt;-struct{}{}。
如果g2先被调度器运行，然后执行代码&amp;lt;-ch。
当然我们也可以把上面的代码换成画成详细的无缓冲队列核心流程图。
缓冲channel发送的时候分为三种情况，想想我们上篇文章快递员送快递场景。
 如果快递柜未满，直接把快递放入到快递柜。(对应缓冲区未满，把发送数据拷贝到缓冲区) 如果快递柜满了，那快递员只能在那等待快递柜空了。(对应把当前g封装成sudog，然后把sudog放到等待发送消息队列sendq中，最后挂起当前g) 如果送快递的时候正好客户在那里等，那就直接把快递给他就是了(对应如果发送的时候发现有等待者，直接数据拷贝给他呗)  我们来创建一个例子。
我们创建了一个缓冲区为7的channel。buffer就是用来存储缓冲元素的，它实际上是一个环形数组。为什么是环形的？因为这样就可以达到复用空间的效果。
此时没有发送接收动作，所以qcount为0，发送(sendx)和接收(recvx)的位置都为0。
我们来看上面的第一种情况。缓冲区未满，
这块代码就比较简单了。如果缓冲区未满，那就把当前要发送的数据拷贝到缓冲区的发送位置，然后发送位置sendx+1，然后当然channel个数qcount+1，整个流程就结束了。
如果缓冲满的情况下，封装当前g成sudog，把这个sudog入队等待发送队列，最后调用gopark挂起当前g，上面无缓冲的时候有提到。
最后一种情况，发送的时候正好有等待接收消息者，那么就从recvq中拿出最早开始等待的接受者，然后把发送的数据直接拷贝给他。
send整体有两个动作：拷贝数据&amp;mdash;&amp;ndash;&amp;gt;唤醒等待的recvq。
那么对于接收操作呢？
 快递柜里有我的快递，那我直接拿就行了。(对应缓冲区有数据，根据读recvx的位置拿数据) 快递柜还没我的快递，但是快递哥打电话说快到了，那我现在楼下转转。(对应缓冲区无数据，把当前g封装成sudog,然后放入到等待接收消息队列recvq中)。 去拿一个快递的时候，正好一个快递员放我另一个快递的时候因为快递柜满了，在那等着。(对应缓冲区满了，且还有等待发送者。此时先到缓冲区获取当前读recvx位置的数据，然后再从等待发送者队列中取出最早等待的发送者，把他要发送的数据拷贝拷贝到当前我读取数据的位置(保证先入先出的顺序)，最后更新发送位置和更新位置即可)。  第一种情况就简单了。直接通过当前读位置recvx读取buffer对应的值，这里还需要通过判断是否忽略返回值，而决定需不需要往当前接收操作拷贝数据。然后移动recvx位置，元素个数qcount-- ，最后解锁即可。
第二种情况，封装当前g成sudog，把这个sudog入队等待接收队列，最后调用gopark挂起当前g。上面无缓冲的时候画过这个逻辑。
第三种情况有点复杂。
这种情况下，当获取到一个等待发送者，对于接收者来说，如果我们直接拿它的发送数据返回会发生什么？举个例子
上图，channel满了，且sendq有一个等待发送者(假设是G8，发送数据为800)，此时执行接收操作，也就出现上述第三种情况。
如果此时我们直接拿G8的数据，那么数据就不能保证先入先出了。
所以正确的操作是，读取当前recvx位置(0)buffer值100，然后把G8的数据800拷贝到0的位置，最后把recvq的位置向前移动，同步发送位置sendx等于recvq。这里，可以思考下为啥？
到这里缓冲channel的核心流程就说完了。如图，
另外后台回复channel有我准备的一个小ppt，可以跟着一起看。</description>
    </item>
    
    <item>
      <title>channel原理解析(二)</title>
      <link>https://www.syst.top/posts/go/channel2/</link>
      <pubDate>Sun, 10 Oct 2021 21:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/channel2/</guid>
      <description>上一篇文章主要介绍channel运行时是通过hchan表示的，也简单说明了hchan各个字段的含义。
我们提到，对channel的操作，本质上就是对hchan里字段的操作。因为在操作的过程中使用了互斥锁，所以保证了channel的并发安全。
这篇文章主要通过现实生活的一些例子来说明channel的一些原理，当然还是不会涉及过多源码。
无缓冲 我们都知道，channel分为无缓冲和缓冲。这两者最大的区别是什么？
我们用一个现实生活的快递例子来说明。
上面场景是快递员在等小库，当然反过来小库也可能在等快递员。
如果没有快递柜，快递员在送快递的过程中，如果家里没人，他就得在那等着，等着有人来签收快递，他才送货结束。
客户在快递员到来之前，他也不能离开家，不然快递来了没人收，所以他也得等到快递员上门，签字收了快递，他才算收货结束。
当然，客户不止有这家快递，如果快递员A在等的时候又来一个快递员B给他送货。这个快递员B不仅得等着，还得排队。等到客户到家后，肯定是先签收A的快递，然后再签收B的快递。
对应到无缓冲channel，
发送数据的时候，如果没有对应的接收者ready，那么发送者就进入到等待发送队列中，等待有对应的接收者唤醒它。
接收数据的时候，如果没有对应的发送者ready，那么接收者就进入到等待接收队列中，等待有对应的发送者唤醒它。
还记得上一篇文章我们介绍过hchan的结构吗。
其中recvq 表示等待接收消息的队列，sendq表示等待发送消息的队列。
我们来看waitq。
本质上waitq就是一个链表，更确切的说是一个双向循环的链表。其中waitq记录了链表的头尾，sudog记录了当前等待者的上一个等待者(prev)和下一个等待者(next)。
这就好像小库在签收完A的快递后喊，下一个是谁啊？
A会说:我的下一个是B。
B会说:是我。我记得我上一个是A，目前我没有下一个，所以我是最后一个。
缓冲 看完了无缓冲队列，我们再来看缓冲队列。还是用上面的故事，
只要快递柜有空闲柜子，快递员就可以直接把快递放到柜子里，让客户自己去柜子拿。如果发送没有空闲的柜子，那就只能等，等到别人告诉我有空闲柜子，我再把快递放到空出来的柜子里。
对应到缓冲channel，上面的快递柜，就是缓冲channel中存储数据的buffer。
对于发送者来说：只要缓冲区未满，发送者就可以继续发送数据存放在缓冲区。一旦缓冲区满了，发送者就只能进入到等待发送队列中，等待有对应的接收者唤醒它，然后它再把数据放入到刚刚被取走数据的位置。
对于接收者来说：只要缓冲区不为空，接收者就可以继续接收数据。一旦缓冲区空了，那么接收者就只能进入到等待接收队列中，等待有对应的发送者唤醒它。
上面还有什么问题吗？还真有。
我们取快递的时候，你一定会按照快递放入到快递柜的先后顺序取快递吗？咋么可能。
但是在channel中，是会保证消息的先进先出(FIFO)关系的。至于咋么保证的，我们终结篇解析代码细节的时候再说。
总结 这篇文章主要通过一个快递的例子来介绍channel操作的原理。下一篇我们介绍channel针对上述处理的细节逻辑。</description>
    </item>
    
    <item>
      <title>对CAP理论的理解</title>
      <link>https://www.syst.top/posts/go/dtm/</link>
      <pubDate>Sun, 10 Oct 2021 21:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/dtm/</guid>
      <description>介绍 最近经常看到有人发一个Go实现的分布式事务管理器，看到star增的挺猛的，索性看看代码实现，毕竟工作中部分场景也用的上。
在写源码分析之前，我们来简单了解一些概念型的东西。
CAP 分布式系统中很大的一个难点在于各个节点之间的状态如何同步，CAP就是分布式系统领域一条已经被证明的定律。
其中各个字母的含义如下，
 Consistency(一致性) Availability(可用性) Partition tolerance(分区容忍性)  下面我们用一些简单的例子来说明。
假设我们的系统是由两个服务组成的:G1和G2。
G1和G2维护了同一条记录V0。G1和G2可以相互通信，外部客户端(Client)可以调用任意一个服务。
当一个客户端对任意一个服务发起读|写请求，那么被请求的那个服务器根据客户端的请求，处理、响应结果。
比如客户端向G1发起一个读操作，客户端G1响应请求。
又比如客户端向G1发起一个写操作，把V0修改成V1。
Consistency(一致性) 这个一致性和事务中ACID中的C还是有区别的。事务中的C更多是指在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这里的完整性包括一些外键约束、键的唯一性等。
而分布式事务中的C指的是，写操作之后的读操作，必须返回该值，这就等同于所有节点访问的是同一份最新数据的副本。
下面是一个非一致性的例子。
客户端成功请求G1服务器写V1。由于网络分区，导致G1数据不能同步到G2，此时客户端从G2读取数据，依旧返回V0。
来看一个满足一致性的例子。
在这个系统中，G1收到客户端写V1的操作，G1在修改自身数据的同时，会把V1数据同步到G2。G1在收到G2的响应后，才向客户端响应结果。这样，之后无论客户端从哪个节点读取数据，都能获取到V1值。
Availability(可用性) 可用性指的是系统中非故障节点接收到的每一个请求都必须响应。
在一个可用的系统中，如果客户端向服务器发送一个请求，那么服务器必须响应客户端每一个请求，不允许忽略客户端请求。
Partition Tolerance(分区容忍性) 什么分区？
 网络分区。
 网络分区咋么理解？
 假设有两台服务器A和B，本来他们两是正常通信的，不知道啥原因，他们之间的网络链接断开，导致无法正常通信。此时本来在同一个网络的AB，发生了网络分区。变成了A所在的A网络和B所在的B网络。这就是网络分区。
 容忍性是指什么？
 当一个服务的多台服务器发生上述网络分区的时候，系统依旧能正常提供服务。
 对CAP的误解 网上很多文章都是这么说的：
 一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项，这被称为CAP定律。
 似乎CAP被解释成一种三选二的定律。
看到一篇文章CAP Twelve Years Later: How the &amp;quot;Rules&amp;quot; Have Changed有一段CAP的完整表述：
 The CAP theorem asserts that any net­worked shared-data system can have only two of three desirable properties。</description>
    </item>
    
    <item>
      <title>远离社交媒体 </title>
      <link>https://www.syst.top/lives/medium/</link>
      <pubDate>Sun, 29 Aug 2021 15:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/medium/</guid>
      <description>这个标题来源自 &amp;laquo;DEEP WORK&amp;raquo; 准则三:远离社交媒体。</description>
    </item>
    
    <item>
      <title>可以躺平一时，不能一直躺平</title>
      <link>https://www.syst.top/lives/tp/</link>
      <pubDate>Sun, 22 Aug 2021 08:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/tp/</guid>
      <description>人可以躺平一时，不能一直躺平。
上周调整了生物钟，晚上十一点前入睡，早上六点起床。
真是一个明智的调整。
以前下班回家没有精力干其他的事。现在早上到上班的这段时间可以自我充电。写文章、敲代码，或者看看书&amp;hellip;&amp;hellip;，突然爱上了这种节奏。
言归正传，
年初开这个号的时候有规划做一些实战项目，可后面也一直没写。
转眼半年过去了，这段计划也应该被提上日程了。
接下来的时间我计划先写三个项目实战。
 grpc-shop 分布式爬虫 Raft 算法实现  为什么要写项目实战？
除了把知识点串起来之外，还有一个最重要的原因，我把它称之为 文档的艺术。
你平常一定会碰到以下困惑。
场景一：对接文档或者使用工具的时候，一定吐槽过别人写的是什么。
站在对接人的角度，我的关注点是 what、how，你却一个劲介绍 much niubi。
虽然我们会吐槽别人的文档，
但是这并不妨碍自己也写出一塌糊涂的文档，也照样一塌糊涂。别人照样对你口吐芬芳，这种场面太过真实了。
记忆中，文档和一次性口罩似乎是同性质的物品。前者用过就丢，后者草草写完封版。
场景二：在和别人讲解自己某个项目、模块、功能的时候，滔滔不绝。可对方依然云里雾里。就像这样：
归根结底，我觉得有五个原因:
 自身对做的东西没有深入去了解。遵循代码和我，有一个能跑的原则。 对细节了如指掌，但是表达能力出现问题。 没有站在读者的角度，你所谓的前置知识、技能、专业名词&amp;hellip;&amp;hellip;，对方完全不知，本质上还是信息(技术认知)差。 内心深处不想让别人了解这个系统，毕竟你想当唯一的消防员👩‍🚒。 读|听者是傻逼。(这个概率有多大?)  能把自己写过的东西、看过的项目&amp;hellip;&amp;hellip;，通过文字、嘴对嘴、视频等方式完整清晰的表达出来是一件非常重要且值得开干的事。
如果连文档都写不清楚，还指望自己能写好 ppt？
因为工作中接触过 grpc，然后也去看了部分源码。看源码的时候，恰巧又发现一处非致命的 bug ，顺手给提了个 pr，后面被合并了。
所以，第一个项目就规划写 grpc-shop。
大体已经规划完了，后面边开发边写文档，类似极客兔兔的七天系列。
grpc-shop 计划 15 篇左右完结撒花。
完毕。</description>
    </item>
    
    <item>
      <title>超实用的 gRPC 客户端调试工具</title>
      <link>https://www.syst.top/posts/go/grpc/</link>
      <pubDate>Tue, 27 Jul 2021 10:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/grpc/</guid>
      <description>介绍 正好看到董泽润老哥写了一篇关于使用 WireShark 分析 gRPC 流量的文章，学到了。
那我就介绍两个日常开发使用过的两款 gRPC 客户端调试工具吧。
Evans Evans 有两种模式：REPL 和 CLI。比起其他 gRPC 客户端,更具有表现力。并且它还支持自动补全功能。
它的安装非常方便，在 Mac 上我们只需要执行以下两行命令即可。
$ brew tap ktr0731/evans $ brew install evans 我们来操作一下 REPL 模式。
首先我们需要有一个 pb 文件，假设你的文件在 api/api.proto，我们只需要这样： 默认地址为 127.0.0.1:50051，当然你可以通过 --host 和 --port 来指定服务器。 上图的命令:
 show package 读取 pb 包名， show service 显示对应服务列表。 call xxx 调用 grpc 服务&amp;hellip;&amp;hellip; &amp;hellip;..  更多命令可自行查阅官网。
除了上述这种直接引入 pb 文件外，我们还可以通过 gRPC 反射包(reflection)， 将 grpc.Server 注册到反射服务中, 这样的话，就可以通过 reflection 提供的反射服务查询到对应的 gRPC 服务或者调用 gRPC 服务。</description>
    </item>
    
  </channel>
</rss>
