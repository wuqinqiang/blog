<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>记得</title>
    <link>https://www.syst.top/</link>
    <description>Recent content on 记得</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 19 Mar 2022 08:42:10 +0800</lastBuildDate><atom:link href="https://www.syst.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Myfriends</title>
      <link>https://www.syst.top/friends/friends/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.syst.top/friends/friends/</guid>
      <description></description>
    </item>
    
    <item>
      <title>《软件架构设计》读书笔记</title>
      <link>https://www.syst.top/readings/go-concurrency-2021-04-20/</link>
      <pubDate>Sat, 19 Mar 2022 08:42:10 +0800</pubDate>
      
      <guid>https://www.syst.top/readings/go-concurrency-2021-04-20/</guid>
      <description>之前说过，会分享一些看书笔记。 前段时间，大佬同事推荐了一本书，书名叫《软件架构设计:大型网站技术架构与业务架构融合之道》,特做一些笔记分享。
这本书整体分为五个部分。
 什么是架构 计算机功底 技术架构之道 业务架构之道 从架构得到技术管理  围绕这五个部分总计17章节。
接下来，我会分享部分我感兴趣的章节。
第一部分：什么是架构？ 一句话:架构是针对所有重要问题做出的重要决策。
不同公司或者相同公司在不同的阶段所面临的问题不同，架构自然也会有所不同。
个人认为，不存在称之为完美的架构，只会存在最适合的。面对的场景，着重的目的不同，那么相应的决策也会不同(有点废话)。
架构的分类。 作者从技术的角度，把软件从底向上分层，做了架构的分类。
第一层:基础架构 基础架构指的是云平台、操作系统、网络、存储、数据库和编译等。
第二层:中间件和大数据平台 中间件，例如分布式服务中间件、消息中间件、数据库中间件、缓存中间件等。
第三层:业务系统架构  通用软件系统。例如常用办公软件、播放器。 离线业务。比如各种基于数据的离线计算、数据挖掘。 大型在线系统。比如电商、广告、搜索、推荐、ERP或者CRM等。  整体就像这样, 从上面你也可以看出，只有大厂这三层都有。像小公司可能只有第三层，或者小量的第二层。 印象里，我前司是没有第一层的，第二层是有的。
一般情况下，每一层都会有专门的人去干活。比如第二层会有专门的中间件部门， 对应又分为几个组，每个组负责对应的中间件开发。
业务部门在第三层，一般情况下，他们只负责业务的curd，如果有场景需要用到一些中间件时， 这时候通常会去找负责中间件的人对接，使用他们的sdk等。(ps:好不好用那就是另外一回事了)
还有一个有意思点，作者在书中提到架构的道与术。
什么是架构的道?
抽象点说，对于技术问题，主要是指高并发、高可用和一致性方面。对于业务问题，主要指业务需求分析和建模。 那么，我们在面对这些问题的时候， 是通过大量的业务系统实践，在实践基础上进行的思考和总结，进而提炼出的一些方法论，这就是道。
更具体的的说，比如，
 数据库如何分库分表？ 分库分表的时机如何确定？ 缓存一致性问题如何解决？ 如何拆分服务？ &amp;hellip;&amp;hellip;  等等问题，这些问题解决方案并不是凭空出现的，而是通过大量的实践落地进而总结产生的一套解决方案核心思路。
所以道很多时候是&amp;quot;虚&amp;quot;的东西，越虚意味着就越抽象，如果两个人在讨论某个问题，而对一些专业理论的认知还未处于同一水平上，那听起来就只能离谱了。
所以要讲道之前，得先有术。术就是指对应具体的语言，框架或者中间件使用姿势。这些都是比较具体的东西，实操性强，方面大家理解。
架构的道和术，都不能偏废，一方面需要不断实践(术)，在实践中深入原理。进而把实践的东西抽象，总结出来，形成方法论(道)。 不断的用道来指导新的术，在新的术中再总结出新的道，如此循环往复。
以上是第一部分内容。
第二部分：计算机功底 主要讲解的是术。计算机功底、语言、框架、网络、数据库、操作系统等。
印象最深刻的是框架那一章。作者提到，熟悉一个框架之后，更多的是应该去关注它的缺点，而不是优点。更应该关注它不能做什么，而不是它能做什么。 它不能做什么往往是别的框架的改进点。
细想，如果你不关注它不能做什么，在你们拍板决定使用框架时，做了一半发现， 核心的一块需求它支持不了，这时候只能欲哭无泪了。
第三部分：技术架构之道 主要讲解的是道。 里面分为:
 高并发问题 高可用与稳定性 事务一致性 多副本一致性 CAP理论  因为这一部分主要是关于道方面的，所以很多地方是抽象化的。读者在读这一部分时候，针对一些问题的解决方案，需要自行去思考部分细节。</description>
    </item>
    
    <item>
      <title>你还不体验泛型吗</title>
      <link>https://www.syst.top/posts/go/generics/</link>
      <pubDate>Sun, 02 Jan 2022 18:32:00 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/generics/</guid>
      <description>介绍 之前有看过官方发布的一些泛型文章，但是自己没动手玩过。还有没有没玩过的，那么最后一班车了。
不管学什么入门先从官网拿例子。
这段代码很简单，定义两个函数，计算对应传入的map值的和。两个函数最大的不同在于函数参数类型有所不同，一个map的值类型为int64,一个为float64，对应返回参数也有所不同。
在没有泛型的情况下，每种类型都不得不重新定义一个函数。
有人可能会说，上面的代码你可以这样写在一个函数里，
你确认这真的好吗？
泛型函数 但是，有了泛型之后，那就简单多了。
上面这段代码中，
定义了一个新函数SumIntsOrFloats，该函数声明两个类型参数 [K comparable, V int64 | float64]。其中K指定了类型必须为可比较(即可以用作比较符 == 和 !=)。因为 go中规定map的key必须是可比较类型。
比如，我们不能这样声明一个map。
所以这里的K就不能使用any关键字。
另一个V参数指定了一个约束，该约束由int64和float64组成，使用 | 指定了联合类型。
所以这里m参数为map[K]V类型，K,V即为参数类型指定的类型。
那么，如果你传入的map值的类型为其他类型。比如下面这种就不行了。
类型约束 上面看到的是我们在方法上对参数做一些约束。当然我们也可以直接声明类型约束。
上面的代码声明了一个Number用做类型约束的接口类型。在接口里声明int64和float64联合类型。
在SumNumbers中如果约束类型为int64或者 float64，那么只需要使用Number类型约束即可，就不用每个不同函数写 int64 | float64，达到代码复用的效果。
但是如果我这样，
我们把map中的值类型调整为自定义的otherInt64类型，otherInt64的基础类型也是int64。但是，这段代码编译会报错。
原因是 int64 约束会将其限制为只能是该类型，也就是只能是 int64，不能是基于此类型定义的其他类型。
如果想使用otherInt64咋么办，很简单，只需要一个～符号，
使用带～xxtype会将其限制为基础类型为xxtype的所有类型。
应用 上面只是简单介绍了一下使用姿势，那么哪些场景下可以使用泛型呢？
比如日常开发中，像slice、map、channel的一些处理函数，可能逻辑相同但是类型不同导致copy多个不同函数，这时候可以用泛型解决。比如，
还有一些行为方面的。比如 go 中的排序，通过泛型，不需要每一个结构都实现(Len，Less，Swap)三个方法，而是抽象出依赖于三个方法的行为。那么想要实现排序只需要依赖定义的这个抽象就行了。
其他方面的应用可以自行体验。
总结 这篇文章主要带你们体验下泛型的基本使用，以及对应的类型约束，最后还简单实验了两个泛型的场景demo，感兴趣的可以自行体验。更多内容，欢迎留言区域交流。
附录  https://go.dev/doc/tutorial/generics https://teivah.medium.com/when-to-use-generics-in-go-36d49c1aeda https://github.com/mattn/go-generics-example  </description>
    </item>
    
    <item>
      <title>就当是年终总结吧</title>
      <link>https://www.syst.top/lives/bulaoqishi/</link>
      <pubDate>Thu, 23 Dec 2021 23:18:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/bulaoqishi/</guid>
      <description>图片拍摄于2021年12月04日
有点可怕，转眼又一年了。
还剩一天年假，今天趁着2021年的最后一周把年假给调了，顺便动动手指写下这篇文章。
既然是年终总结，那么理所当然，随意写了，你们也随意看看就行了。
今年有靠公众号赚到钱吗？
没有。一毛没挣。
唯一开通流量主赚几个鸡腿的机会，我嫌体验差也没开通，接广告就更不可能了，我的公众号不足以让正经一点的广告商找上门。
自己倒是给粉丝送书的时候搭进去点钱，不过，我开心就好。
另外，我现在的认知不足以让我通过公众号赚到钱。
为什么要提上面这句话？
我发现这两年听到的最多的一句话是:人只能赚到自己认知内的钱，即使现在赚到了超过认知外的xxx，后面也会xxx。
我不知道这句话的出处在哪，只是每每看到别人写东西的时候都会带上这句话。
我觉得这句话太过绝对了。在我看来，任何人都有可能赚到超出自己认知范围的钱。
希望坚信这句话的人能在下面反驳我，但是不要骂我，
上面是一段小插曲。
今年收获了什么？
毕业来杭州也三年了，真的太快了。之前一直想留在杭州，年初在家人的帮助下，还是在杭州安了一个小家，也算是实现了一个小小的需求吧。
公众号勉勉强强上路了，年初公众号定下的目前完成度不到40%，也是疯狂被打脸。
但是这其实也是意料之中的事情。回想起年初定下公众号目标的时候过于随意，而且那时候我就抱有大概率完成不了的念头。
还没开打，就否定自己，这能不输吗？
我们常听说：不要给自己设上限。
我现在加一句：不要给自己设下限。
所以它其实就是：永远不要给自己设限。
除了公众号这块，其他年初定下的目前都完成了。
但是在我看来，有些虽然完成了，但是质量堪忧。所以接下来对下一年的todolist，要求会再高点，最好能带有一些实际的量化指标。
工作上，也算是完整接触golang的一年。在用golang的同时，也去看了底层的一些源码，对自己使用的东西更加有把握了。
今年来了一些同事，加上之前的一些同事。有那么一段时间，试着去观察同事身上一些优秀品质。毕竟每个人都是独一无二的，也有属于自己的闪光点。
那么我们就需要试着在他们身上寻找那些我们所不具备的品质，试着学习他们的一些思维模式以及做事情的方式、技巧等，来弥补自己身上的空缺。
无知并不可怕，可怕的是无知却不自知，无知却傲慢，无知却偏见。
我觉得，我应该时刻提醒自己这句话。
另外，我之前有产生过一些错误的想法。可能觉得自己离35岁还远，进而觉得危机离我还远。
以至于在某些行为上，会放低对自我的要求，不太注重细节。现在想想，这种想法，是极其可怕的。
你们都知道细节决定成败，我想说的是，细节也能形成习惯。
当你在一件事的细节上敷衍了事，那么后面相同的事你也会习惯性地这样处理，久而久之，这就是你的习惯。
这和篮球中投篮动作有点相似，打过球的人都知道，想想你现在的投篮姿势，是不是就是你开始打球那段时间产生的姿势，然后这个姿势就被定型了，很难再进行投篮的转变。
即使你说你中途通过训练调整过来了，可是，那段时间是不是非常痛苦？
最后，看书方面，今年看的书并不是很多，但是很杂。有时候会几本书切着看，我不知道你们有没有这个习惯。
虽然也给自己做了一些读书笔记，但整体来看，看的还是太少了，明年争取看完每本书都写一篇读书笔记供大家参考。跪求各位大佬留言区留下你们看过的好书，我去啃啃。
本篇到这里也就结束了。唉，没钱人的一年，往往就是这么的朴实无华且枯燥</description>
    </item>
    
    <item>
      <title>不定期的一些思考</title>
      <link>https://www.syst.top/lives/think/</link>
      <pubDate>Thu, 23 Dec 2021 22:23:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/think/</guid>
      <description>不要觉得一件事情简单，自我感觉没有挑战，而无动于衷。你所谓的简单，在很多时候只是你并没有去深度思考事情的本质。
即使是简单的curd工作，你有没有想过，当前你的设计是否满足未来产品形态的变动？一改就头痛？还是写出来的代码测试用例都难写？
你有没有这样的时刻？
当别人带着一个问题来寻找你进行解决方案。你思考一番，在这个问题的基础上加以补丁，你自以为解决了这个问题，直到后面补丁也越来越多。
你有没有想过，其实，很多时候，出发点就错了。我们都把目光直接切入这个问题的解决方案，也就是所谓的补丁(我并不是说我们不解决问题)，而是，是不是忽略了去思考为什么会出现这样的问题？是不是一开始就错了？
如果一开始就错了，在这个错误的基础上产生错误的问题，我们应该直接揪出源头，然后干掉它。而不是在错误的基础上疯狂的给错误的问题打上错误的补丁。
和别人沟通的时候，当别人发表完自己的意见和观点，你开口的第一句是不是:
&amp;ldquo;不是这样的&amp;rdquo;。
你喜欢用否定句来当场否定别人，直接当场浇灭对方。
如果改成 &amp;ldquo;好的，我明白你意思了。但是我想了下，xxxx&amp;rdquo; 类似这样，沟通的效果会不会更加理想？</description>
    </item>
    
    <item>
      <title>那些用Go实现的分布式事务框架</title>
      <link>https://www.syst.top/posts/go/transaction/</link>
      <pubDate>Wed, 08 Dec 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/transaction/</guid>
      <description>开篇 不知不觉竟然一个月没更新了，人一旦懒下来只会越来越懒。
最近对分布式事务产生了一些兴趣，查阅了一些文章以及论文。这篇文章主要介绍我看的两个项目，不涉及一些理论知识。
 阿里开源版本的Seata，主要看了Go实现的seata-golang(落后java版) 以及前段时间很多公众号都发的dtm。  Seata简介 Seata是由阿里开源的分布式事务服务，目前为用户提供了AT、TCC、SAGA、XA的事务模式，整体采用的是两阶段提交协议。Go版的seata-golang 目前好像只实现了mysql的AT、TCC模式，作者现在不咋更新了。
Seata 有几个核心角色：
 TC(Transaction Coordinator) -事务协调者。(维护全局和分支事务的状态，驱动全局事务提交或回滚) TM(Transaction Manager)-事务管理器。(定义全局事务的范围：开始全局事务、提交或回滚全局事务。) RM(Resource Manager)-资源管理器。(管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚)  当然这样看，可能还不是很理解，我拿一张官网的图加以解释。
从上图中可以看出，这三个角色所负责的工作如下，
TC
 维护全局和分支事务状态，需要进行存储。 当一个分布式事务处理结束，需要通知到每个RM是commit还是rollback。  TM
 向TC请求开启一个分布式事务，得到一个全局唯一的分布式id。 根据每个参与分布式事务的RM一阶段的反馈，决定二阶段向TC请求此次分布式事务是commit还是rollback(绝大部分场景下，一阶段任一RM失败，本次分布式事务失败)  RM
说的白一点就是管理参与分布式事务的各个服务(比如经典下单场景中涉及到的:订单服务、库存服务、营销服务等)
ps:个人感觉，这里的RM有点类似微服务中的中间处理层(专业术语他们管这叫bff-&amp;gt;backend for fronted)。
  一阶段 prepare 行为(主动)：每个RM调用 自定义 的 prepare 逻辑。
  二阶段 commit 行为(被动触发)：如果本次分布式事务第一阶段全部RM成功，TC处理完自身状态变更后，调用各个RM自定义 的 commit 逻辑。(一阶段RM全部成功)
  二阶段 rollback 行为(被动触发)：如果本次分布式事务第一阶段任一RM失败，TC处理完自身状态变更后，调用各个RM自定义 的 rollback 逻辑。(一阶段任意RM失败)
  好了。下面可以看看seata-golang 实现的一些细节了，seata-golang 底层采用gRPC进行通信。
seata-golang 我们先看RM部分结构。</description>
    </item>
    
    <item>
      <title>那些用Go实现的分布式事务框架(2)</title>
      <link>https://www.syst.top/posts/go/transaction2/</link>
      <pubDate>Wed, 08 Dec 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/transaction2/</guid>
      <description>开篇 上一篇我们主要介绍的是seata-golang。一个对标seata的go语言实现，当然版本还是落后Java版很多的。
这次我们来介绍一下另一个go实现的分布式事务:dtm。
首先来看下dtm整体架构图(来源官网)。
再来看之前的seata架构图。
从架构上来看，大差不差。
seata中的TC对标dam的TM。
RM两边意思一致。
seata中的TM对标dtm事务SDK。作用都是一样:第一阶段开启一个全局事务,执行各RM分支事务，第二阶段根据RM第一阶段执行结果，决定调用TC(seata)|TM(dtm) commit或者rollback。
架构上，个人感觉只是因为模块名称以及图画不一样的差别。
当然在实现细节上还是有很大差别的。
我们先简单介绍下DTM各个模块。
TM TM 层在代码中是没有具体的主体结构的，开始都是函数之前的调用。
启动TM实际上开启了两个服务，http以及grpc这两个服务。
// StartSvr StartSvr func StartSvr() { app := common.GetGinApp() app = httpMetrics(app) addRoute(app) dtmimp.Logf(&amp;#34;dtmsvr listen at: %d&amp;#34;, common.DtmHttpPort) go app.Run(fmt.Sprintf(&amp;#34;:%d&amp;#34;, common.DtmHttpPort)) lis, err := net.Listen(&amp;#34;tcp&amp;#34;, fmt.Sprintf(&amp;#34;:%d&amp;#34;, common.DtmGrpcPort)) dtmimp.FatalIfError(err) s := grpc.NewServer( grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer( grpc.UnaryServerInterceptor(grpcMetrics), grpc.UnaryServerInterceptor(dtmgimp.GrpcServerLog)), )) dtmgimp.RegisterDtmServer(s, &amp;amp;dtmServer{}) dtmimp.Logf(&amp;#34;grpc listening at %v&amp;#34;, lis.Addr()) go func() { err := s.Serve(lis) dtmimp.FatalIfError(err) }() go updateBranchAsync() // 省略代码 } http路由，</description>
    </item>
    
    <item>
      <title>&lt;&lt;不老奇事&gt;&gt;观后感</title>
      <link>https://www.syst.top/lives/year-end-summary/</link>
      <pubDate>Sun, 07 Nov 2021 21:12:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/year-end-summary/</guid>
      <description>今天刚好没事，看到了王传君的这部电影，过段买票去看了。
去之前以为这部片主题依旧是 “亲梅竹马”、“少时分离”、&amp;ldquo;长大偶遇&amp;rdquo;、&amp;ldquo;再续前缘&amp;rdquo;、“历经坎坷”、“最后遗憾”等等带有印象中各种标签的爱情片？
开头也确实和想象中相差无几。不过，中间画风突转太快。更多的是在探索生命的意义？电影中好多台词单独拿出来都是一条伤感唯美非主流的朋友圈。
其实电影的后半部分，对我来说，还是挺丧的。给我的总结是，在死亡面前，所有东西都毫无意义。
你不需要虚荣，不需要讨好他人，不需要带着一副面具伪装自己。</description>
    </item>
    
    <item>
      <title>channel原理解析(三)</title>
      <link>https://www.syst.top/posts/go/channel3/</link>
      <pubDate>Sun, 10 Oct 2021 21:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/channel3/</guid>
      <description>上一篇文章主要通过一个现实例子间接反映channel的一些原理。最后一篇开始介绍一些细节，会涉及到源码。
还是从一个简单的代码程序看起。
我们创建了一个无缓冲channel，然后往这个channel发送数据。因为程序中没有读操作ready，所以发送的时候会阻塞。我们通过汇编代码看它底层的调用。
从图中我们看到，上述发送操作，程序运行时实际调用的runtime.chansend1。
最终chansend1最终调用的还是chansend，chansend的第三个参数block是个bool值，表示操作channel不能立即成功时是否需要阻塞。
具体哪些操作？
 向无缓冲channel发送数据且当前无接收者ready。 接收无缓冲channel数据且当前无发送者ready。 缓冲channel已满，往channel发送数据。 缓冲channel为空，接收channel数据 向一个nil的channel发送数据。(注意，向一个nil的channel发送数据并不会引发panic)。 向一个nil的channel接收数据。  碰到上面的操作，如果不是特殊处理，我们的应用程序会被阻塞，直到被唤醒。
当然对于向nil的channel发送|接收数据，后续再也没机会被唤醒了。
那么如果是快速试错的场景，是不是只要把block改成false，在失败的场景下就不会被阻塞了。
编译这段代码。
可以看出，上面这段代码编译后调用selectnbsend最终发送动作调用的还是chansned，只是传入的block是false。这样一旦操作失败，程序不会被阻塞。
同理我们可以得出接收的调用动作。
到这里我们已经知道，
发送数据，最终调用的runtime.chansend。
接收数据，最终调用的runtime.chanrecv。
接下来我们来说明这两个函数底层是如何操作的。
我们还是以一个无缓冲的channel和缓冲channel来说明。
来看一段简单的程序。
值得一提的是，在Go中使用 go func的时候，本质上调用的是runtime.newproc创建一个g，然后把这个g交给调度器调度。至于什么时候g被调度，然后执行你的代码逻辑，那就要看调度器的&amp;quot;心情&amp;quot;了。
所以上面创建的两个g(暂且称为g1和g2)，可以看成是我们向调度器提交了两个任务g，我们无法保证哪个g会被先调度器调度执行，因此我们也不确定发送和接收这两个操作，谁会先被执行。
假设g1先被调度器运行，然后执行代码ch&amp;lt;-struct{}{}。
如果g2先被调度器运行，然后执行代码&amp;lt;-ch。
当然我们也可以把上面的代码换成画成详细的无缓冲队列核心流程图。
缓冲channel发送的时候分为三种情况，想想我们上篇文章快递员送快递场景。
 如果快递柜未满，直接把快递放入到快递柜。(对应缓冲区未满，把发送数据拷贝到缓冲区) 如果快递柜满了，那快递员只能在那等待快递柜空了。(对应把当前g封装成sudog，然后把sudog放到等待发送消息队列sendq中，最后挂起当前g) 如果送快递的时候正好客户在那里等，那就直接把快递给他就是了(对应如果发送的时候发现有等待者，直接数据拷贝给他呗)  我们来创建一个例子。
我们创建了一个缓冲区为7的channel。buffer就是用来存储缓冲元素的，它实际上是一个环形数组。为什么是环形的？因为这样就可以达到复用空间的效果。
此时没有发送接收动作，所以qcount为0，发送(sendx)和接收(recvx)的位置都为0。
我们来看上面的第一种情况。缓冲区未满，
这块代码就比较简单了。如果缓冲区未满，那就把当前要发送的数据拷贝到缓冲区的发送位置，然后发送位置sendx+1，然后当然channel个数qcount+1，整个流程就结束了。
如果缓冲满的情况下，封装当前g成sudog，把这个sudog入队等待发送队列，最后调用gopark挂起当前g，上面无缓冲的时候有提到。
最后一种情况，发送的时候正好有等待接收消息者，那么就从recvq中拿出最早开始等待的接受者，然后把发送的数据直接拷贝给他。
send整体有两个动作：拷贝数据&amp;mdash;&amp;ndash;&amp;gt;唤醒等待的recvq。
那么对于接收操作呢？
 快递柜里有我的快递，那我直接拿就行了。(对应缓冲区有数据，根据读recvx的位置拿数据) 快递柜还没我的快递，但是快递哥打电话说快到了，那我现在楼下转转。(对应缓冲区无数据，把当前g封装成sudog,然后放入到等待接收消息队列recvq中)。 去拿一个快递的时候，正好一个快递员放我另一个快递的时候因为快递柜满了，在那等着。(对应缓冲区满了，且还有等待发送者。此时先到缓冲区获取当前读recvx位置的数据，然后再从等待发送者队列中取出最早等待的发送者，把他要发送的数据拷贝拷贝到当前我读取数据的位置(保证先入先出的顺序)，最后更新发送位置和更新位置即可)。  第一种情况就简单了。直接通过当前读位置recvx读取buffer对应的值，这里还需要通过判断是否忽略返回值，而决定需不需要往当前接收操作拷贝数据。然后移动recvx位置，元素个数qcount-- ，最后解锁即可。
第二种情况，封装当前g成sudog，把这个sudog入队等待接收队列，最后调用gopark挂起当前g。上面无缓冲的时候画过这个逻辑。
第三种情况有点复杂。
这种情况下，当获取到一个等待发送者，对于接收者来说，如果我们直接拿它的发送数据返回会发生什么？举个例子
上图，channel满了，且sendq有一个等待发送者(假设是G8，发送数据为800)，此时执行接收操作，也就出现上述第三种情况。
如果此时我们直接拿G8的数据，那么数据就不能保证先入先出了。
所以正确的操作是，读取当前recvx位置(0)buffer值100，然后把G8的数据800拷贝到0的位置，最后把recvq的位置向前移动，同步发送位置sendx等于recvq。这里，可以思考下为啥？
到这里缓冲channel的核心流程就说完了。如图，
另外后台回复channel有我准备的一个小ppt，可以跟着一起看。</description>
    </item>
    
    <item>
      <title>channel原理解析(二)</title>
      <link>https://www.syst.top/posts/go/channel2/</link>
      <pubDate>Sun, 10 Oct 2021 21:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/channel2/</guid>
      <description>上一篇文章主要介绍channel运行时是通过hchan表示的，也简单说明了hchan各个字段的含义。
我们提到，对channel的操作，本质上就是对hchan里字段的操作。因为在操作的过程中使用了互斥锁，所以保证了channel的并发安全。
这篇文章主要通过现实生活的一些例子来说明channel的一些原理，当然还是不会涉及过多源码。
无缓冲 我们都知道，channel分为无缓冲和缓冲。这两者最大的区别是什么？
我们用一个现实生活的快递例子来说明。
上面场景是快递员在等小库，当然反过来小库也可能在等快递员。
如果没有快递柜，快递员在送快递的过程中，如果家里没人，他就得在那等着，等着有人来签收快递，他才送货结束。
客户在快递员到来之前，他也不能离开家，不然快递来了没人收，所以他也得等到快递员上门，签字收了快递，他才算收货结束。
当然，客户不止有这家快递，如果快递员A在等的时候又来一个快递员B给他送货。这个快递员B不仅得等着，还得排队。等到客户到家后，肯定是先签收A的快递，然后再签收B的快递。
对应到无缓冲channel，
发送数据的时候，如果没有对应的接收者ready，那么发送者就进入到等待发送队列中，等待有对应的接收者唤醒它。
接收数据的时候，如果没有对应的发送者ready，那么接收者就进入到等待接收队列中，等待有对应的发送者唤醒它。
还记得上一篇文章我们介绍过hchan的结构吗。
其中recvq 表示等待接收消息的队列，sendq表示等待发送消息的队列。
我们来看waitq。
本质上waitq就是一个链表，更确切的说是一个双向循环的链表。其中waitq记录了链表的头尾，sudog记录了当前等待者的上一个等待者(prev)和下一个等待者(next)。
这就好像小库在签收完A的快递后喊，下一个是谁啊？
A会说:我的下一个是B。
B会说:是我。我记得我上一个是A，目前我没有下一个，所以我是最后一个。
缓冲 看完了无缓冲队列，我们再来看缓冲队列。还是用上面的故事，
只要快递柜有空闲柜子，快递员就可以直接把快递放到柜子里，让客户自己去柜子拿。如果发送没有空闲的柜子，那就只能等，等到别人告诉我有空闲柜子，我再把快递放到空出来的柜子里。
对应到缓冲channel，上面的快递柜，就是缓冲channel中存储数据的buffer。
对于发送者来说：只要缓冲区未满，发送者就可以继续发送数据存放在缓冲区。一旦缓冲区满了，发送者就只能进入到等待发送队列中，等待有对应的接收者唤醒它，然后它再把数据放入到刚刚被取走数据的位置。
对于接收者来说：只要缓冲区不为空，接收者就可以继续接收数据。一旦缓冲区空了，那么接收者就只能进入到等待接收队列中，等待有对应的发送者唤醒它。
上面还有什么问题吗？还真有。
我们取快递的时候，你一定会按照快递放入到快递柜的先后顺序取快递吗？咋么可能。
但是在channel中，是会保证消息的先进先出(FIFO)关系的。至于咋么保证的，我们终结篇解析代码细节的时候再说。
总结 这篇文章主要通过一个快递的例子来介绍channel操作的原理。下一篇我们介绍channel针对上述处理的细节逻辑。</description>
    </item>
    
  </channel>
</rss>
