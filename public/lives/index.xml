<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lives on 是不是很酷</title>
    <link>https://www.syst.top/lives/</link>
    <description>Recent content in Lives on 是不是很酷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 24 Dec 2022 18:30:52 +0800</lastBuildDate><atom:link href="https://www.syst.top/lives/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>资源推荐</title>
      <link>https://www.syst.top/lives/source/</link>
      <pubDate>Sat, 24 Dec 2022 18:30:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/source/</guid>
      <description>今天推荐一下平常使用到的资源。
CS自学 如果你像我一样不是科班出身的，没有系统学习过CS课程，那么这个网址很适合你。里面大多数是国外顶级大学CS相关的公开课。有些可能你已经看过书籍了，只是拿来垫桌脚了，比如深入理解计算机系统😂。这些CS课程其实和书中的章节是对应的。所以一个技巧是先对着书预习，然后再看视频。当然，书中的题目也可以适当的做下，要是能输出就更好了。这是一个漫长的过程，希望你能耐得住寂寞～
架构 我之前看过的两本书籍感觉还不错：&amp;laquo;软件架构设计&amp;raquo; 和 &amp;laquo;凤凰架构&amp;raquo; 。这两本都是国人写的，我们看起来可能更加贴切。
也有一些关于架构的网站。
 system-design system-design-primer bytebytego system-design-interview  当然，这些系统设计大概都是从高层次的角度来分析设计的，并不会涉及过多的细节。很多细节也需要在对应场景才能对应分析吧，细节是魔鬼。
区块链 最近几年挺火的一个话题，虽然你可能并没有从事相关工作，但是并不妨碍你去了解它，这样好歹别人跟你吹牛的时候，你不会被他忽悠。然后你就知道大多数web3项目本质上还是一个中心化的项目。大家拿着&amp;quot;去中心化&amp;quot;,”可匿名性“的地址，在中心化的平台上进行交易，你还能说这是匿名的吗？
关于区块链的视频，我推荐一个对程序员来说入门首选的视频。
北大肖臻的&amp;laquo;区块链技术与应用&amp;raquo;。
工具类 随便介绍两个吧。
Data Structure Visualizations 这个项目可以把常见的数据结构和算法以动画的的形式展示出来。
maigret 这个项目有点牛逼，输入一个id，就能把互联网上你的相关账户全部扒出来。
grammarly 这个大部分人应该都知道，平时比如写issues或者代码注释的时候，像我英语不好的人，想要确认有没有英语语法错误或者单词拼写错误，甚至是标点符号，靠它纠正了。
wakatime 这个工具可以统计你最近一段时间内编码时间，还有一些时间分配。goland 和 vscode 都有插件。</description>
    </item>
    
    <item>
      <title>婚姻</title>
      <link>https://www.syst.top/lives/hunyin/</link>
      <pubDate>Sun, 19 Jun 2022 21:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/hunyin/</guid>
      <description>这也算不定期更新的日常。
对我来说好遥远的话题啊。
高中的前桌和我说国庆要结婚了，真替她感到高兴。
发小的婚礼和她是同一天。
好在前桌是嫁人，女方正餐是中午。发小是娶媳妇，正餐是晚上，两边正餐都赶的上，一点都不误吃席。
村里同阶段的发小挺多了的，没结婚的就更多了。以至于每次我们都会互相调侃对方啥时让兄弟们吃席。
这两年断断续续参加了几次同学朋友发小的婚礼，每次都会有不一样的体验。
尽管他们的面容千姿百态，但是脸上写满的笑容都一样的藏不住。
难道，只有婚姻才能让他们开怀大笑吗？
可是，每每和他们接触的时候，并没有看出婚姻对他们进行的自身&amp;quot;改造&amp;quot;，以至于我一度怀疑婚姻的可选性。
因此，我曾经开玩笑似的问一个朋友，
结婚后有什么区别。
朋友的回答是没啥区别。
咋么能没啥区别呢。
噢，他一定是在敷衍我。
说实话，我确实无法体会婚姻意味着什么。家庭、责任、义务&amp;hellip;&amp;hellip;，这些都是别人口中说的，和我没什么关系。
但是随着年纪的增大，环境因素的干扰(主要是爸妈，每每和我聊天的时候都会不经意间的暗示)，我不得不开始考虑这个问题。
之前一个朋友和她男朋友同居了。她就一个婚前同居的问题和我有过讨论，她觉得就应该有婚前同居的行为，才能深入了解对方balabala&amp;hellip;..
我猜是她和另外的人关于这个问题发生了争执，所以才来问问我。
我哪懂这些啊。
但是我心里很清楚，她的本质并不是和我讨论这个问题的对错，而是来寻求我的肯定。
她需要别人去认可她的做法，以寻求内心的平静。
所以我只是在她发表自己想法的同时点头说嗯，仅此而已。
现在，她也快结婚了。
至于我，首先得new个对象。</description>
    </item>
    
    <item>
      <title>不定期更新的日常之远程办公</title>
      <link>https://www.syst.top/lives/every-thing-is-ok/</link>
      <pubDate>Fri, 13 May 2022 23:23:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/every-thing-is-ok/</guid>
      <description>终于想起自己还有一个公众号，也是有两个月没更新了，感谢还关注的各位。
今年4月份从上家公司离职，开启了跑路日志。
上家公司呆了快两年，以当前互联网平均跳槽频率，在一家公司两年基本算一个小老员工了，哈哈。
离职主要因为从去年底开始搞了一坨很傻逼的企业文化，快被恶心死了，终于是和几个同期同事一起跑路了。
然后就见证着同部门或者不同部门认识的人一个个的离开了，当然他们离开的原因就五花八门了。
离职的同事拉了一个离职微信群，群名和之前在职时部门群名称一样。后来，离职群里的人比在职的部门群人还多一点点，真是有够魔幻的。
当然这里面也隐藏了部分没离职的同事。
离开的时候，公司一直在裁员，后面把某城市的分部都裁光了，可惜走的时候部门没有裁员名额，看着别的部门认识的都是拿着n+1走的，着实有点酸。
出来的时候，杭州已经开始大面积裁员了。岗位属实不多。
别看Go这么火，出来找工作，在杭州，除了大厂，很少有Go相关的岗位。常年招聘也是那几家。其他公司Go相关的岗位基本都是区块链方向，不是区块链就是区块链，真的一言难尽。
当然这一切，菜才是原罪。
选择来现在这家，
第一不卷，之前在公司办公的时候，到点没多久就全跑完了。
没有大厂的体积，所以没有那么多条条框框，流程也没有那么繁琐。
最主要的一点就是可以支持远程办公！！！！
月初眼瞅着杭州的天气越来越热了，就申请远程办公了。
一段时间体验下来，
上班通勤时间没了，每天多了好多时间。
时间上相对自由，毕竟制定了okr，关注结果。
说实话，没人真正关心你什么时间干活。
不过我调整了作息，一般晚上11点睡觉，早上7点半起来，保持8小时睡眠。
而且早上时间基本没人会打扰，脑子也最清醒。
唯一不好的一点:沟通方面。虽然可以语音视频，但还是没面对面，嘴对嘴效果好。
尤其是项目涉及人员越多的情况下，沟通的效率就越低，对于这点，深有体会。
不知道各位今年行情咋样？
var ( userInfo magic.UserInfo ) userInfo.Email = &amp;ldquo;remember@qq.com&amp;rdquo; userInfo.PublicAddress = &amp;ldquo;remember2242&amp;rdquo;</description>
    </item>
    
    <item>
      <title>不定期更新的日常</title>
      <link>https://www.syst.top/lives/2022-04-16/</link>
      <pubDate>Sat, 16 Apr 2022 20:24:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/2022-04-16/</guid>
      <description>这个系列也好久没更新了，那就随便聊聊吧。
这段时间我在做什么？
总结下来就是，学英语、冥想、练习打字。
英语 英语这件事，还是特别重要的，在我心目中的分量排第一。
我记得刚参加工作那会，当时连qiang都没翻过，红到不能在红。
那时候只会百度，csdn常伴我身。遇到英文报错(哪来的中文啊)，只会把那一段连根复制到百度搜索，只要有答案出来，还思考个啥，使出cv大法。
跑通了:作者牛逼。
跑不通:傻逼作者。
更别提去官方文档查阅资料，去issues上看问题了。
当时凡事都先百度，xxx咋么、zzz如何&amp;hellip;&amp;hellip;。
虽然现在看的都是官网文档，偶尔看一些国外的技术文章以及感兴趣方向的论文，但是技术性的资料常常也带有些许垂直领域的标签。很多词都是一些专业通用术语，可能第一次你不知道，查询了一次，下次你就知道啥意思，看的多了，行业内的词汇量也就差不多了。
和日常英语还是有一丢丢不同的，
毕竟生活中的英语，单词范围更大，句子中还带有梗在里面，看不懂也听不懂，就像外国人看不懂中文一个道理。
我的英语确实不咋地。所以需要下功夫。不过还好，我觉得语言这方面，如果肯花精力，去刻意练习，提高英语水平也只是时间的问题。
不过得需要找到适合自己的最佳方式。
首先，语言学习我们都分为听、说、读、写对吧。如果你直接靠背单词入手，对于每一个单词，你得听它的发音，知道它的单词拼写，还得知道它的意思，最后自己要说出来。这就意味着相当于你一次性的去学习听、说、读、写这四个部分，还是基于没有上下文的环境下，效果就不用多说了吧。
我在油管看到Tinyfool老师的频道，他的观点是建立以听力为主导的英语学习的方式。
首先一定得先听懂别人在讲什么，你听懂了，会不会说是另一回事，至少你可以通过肢体语言回应对方。(我想了想等你已经听得懂别人说什么的时候，理论上多少能说一点)
但是如果你连听都听不懂别人说什么，你咋通过你的器官做出回应？靠fuck嘛？
所以听这是前置条件，我也十分认可。不然我实在想不通为啥国内英语考试第一部分一定是听力。
我现在的做法是，找到自己喜欢的一个播客，每一篇四分钟左右的语音，我会先听一遍，一般能听懂它的主题是啥，大概说了啥，有哪里是完全没听懂的。然后再看一遍原文，记录生词，看下完全没听懂的地方是在说啥，最后再重新听一遍。
要是第一遍连主题都没听懂的，一般就是完全不涉及的领域，全是领域专用词。
不知道你们都是如何学习英语的，希望留言区能分享，或者给点意见。
冥想 一年前的时候看过一点书，有尝试过，后面中断了。
前几周逛西溪的时候，老远看到一个小姐姐在那打坐冥想，我去的时候她已经在了，我站在远处呆了十几分钟，小姐姐一动不动，似乎进入状态。后面我就走了，很想问一句，她是睡着了吗？
回来的时候，自己当天就重新拾起冥想了。我是从一开始的5分钟到7分钟到10分钟到现在15分钟。
我的做法也很简单，每天固定时间(去除一切外部干扰，环境要安静),定个时间，就坐在床上，然后闭眼进入状态，我的注意力都在我的呼吸上。
冥想的一个困难点从我的感受来看在于注意力。在这短短的几分钟，你的注意力可能会转移到不同的场景中，我认为这是一种主观意识发生改变。所以当你的注意力发生转移，你需要的是立刻把它拉回来。
这段时间感受下来，冥想对我好处主要两点，
 获取内心的平静。 累的时候，花个十分钟左右的冥想，能让我恢复状态。  以上只是我对冥想浅浅的认知。
打字 啥？打字？
不怕你们笑话，我打字不是使用的标准指法，可能多少会有点影响，所以我想把它标准化。
别说，因为习惯的问题，短时间还真不好改，正在慢慢尝试改变。我主要在typingclub这个网站上，每天练习半个小时。
好了，这期的不定期更新的日常到这里就结束。欢迎一起讨论。</description>
    </item>
    
    <item>
      <title>就当是年终总结吧</title>
      <link>https://www.syst.top/lives/bulaoqishi/</link>
      <pubDate>Thu, 23 Dec 2021 23:18:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/bulaoqishi/</guid>
      <description>图片拍摄于2021年12月04日
有点可怕，转眼又一年了。
还剩一天年假，今天趁着2021年的最后一周把年假给调了，顺便动动手指写下这篇文章。
既然是年终总结，那么理所当然，随意写了，你们也随意看看就行了。
今年有靠公众号赚到钱吗？
没有。一毛没挣。
唯一开通流量主赚几个鸡腿的机会，我嫌体验差也没开通，接广告就更不可能了，我的公众号不足以让正经一点的广告商找上门。
自己倒是给粉丝送书的时候搭进去点钱，不过，我开心就好。
另外，我现在的认知不足以让我通过公众号赚到钱。
为什么要提上面这句话？
我发现这两年听到的最多的一句话是:人只能赚到自己认知内的钱，即使现在赚到了超过认知外的xxx，后面也会xxx。
我不知道这句话的出处在哪，只是每每看到别人写东西的时候都会带上这句话。
我觉得这句话太过绝对了。在我看来，任何人都有可能赚到超出自己认知范围的钱。
希望坚信这句话的人能在下面反驳我，但是不要骂我，
上面是一段小插曲。
今年收获了什么？
毕业来杭州也三年了，真的太快了。之前一直想留在杭州，年初在家人的帮助下，还是在杭州安了一个小家，也算是实现了一个小小的需求吧。
公众号勉勉强强上路了，年初公众号定下的目前完成度不到40%，也是疯狂被打脸。
但是这其实也是意料之中的事情。回想起年初定下公众号目标的时候过于随意，而且那时候我就抱有大概率完成不了的念头。
还没开打，就否定自己，这能不输吗？
我们常听说：不要给自己设上限。
我现在加一句：不要给自己设下限。
所以它其实就是：永远不要给自己设限。
除了公众号这块，其他年初定下的目前都完成了。
但是在我看来，有些虽然完成了，但是质量堪忧。所以接下来对下一年的todolist，要求会再高点，最好能带有一些实际的量化指标。
工作上，也算是完整接触golang的一年。在用golang的同时，也去看了底层的一些源码，对自己使用的东西更加有把握了。
今年来了一些同事，加上之前的一些同事。有那么一段时间，试着去观察同事身上一些优秀品质。毕竟每个人都是独一无二的，也有属于自己的闪光点。
那么我们就需要试着在他们身上寻找那些我们所不具备的品质，试着学习他们的一些思维模式以及做事情的方式、技巧等，来弥补自己身上的空缺。
无知并不可怕，可怕的是无知却不自知，无知却傲慢，无知却偏见。
我觉得，我应该时刻提醒自己这句话。
另外，我之前有产生过一些错误的想法。可能觉得自己离35岁还远，进而觉得危机离我还远。
以至于在某些行为上，会放低对自我的要求，不太注重细节。现在想想，这种想法，是极其可怕的。
你们都知道细节决定成败，我想说的是，细节也能形成习惯。
当你在一件事的细节上敷衍了事，那么后面相同的事你也会习惯性地这样处理，久而久之，这就是你的习惯。
这和篮球中投篮动作有点相似，打过球的人都知道，想想你现在的投篮姿势，是不是就是你开始打球那段时间产生的姿势，然后这个姿势就被定型了，很难再进行投篮的转变。
即使你说你中途通过训练调整过来了，可是，那段时间是不是非常痛苦？
最后，看书方面，今年看的书并不是很多，但是很杂。有时候会几本书切着看，我不知道你们有没有这个习惯。
虽然也给自己做了一些读书笔记，但整体来看，看的还是太少了，明年争取看完每本书都写一篇读书笔记供大家参考。跪求各位大佬留言区留下你们看过的好书，我去啃啃。
本篇到这里也就结束了。唉，没钱人的一年，往往就是这么的朴实无华且枯燥</description>
    </item>
    
    <item>
      <title>不定期的一些思考</title>
      <link>https://www.syst.top/lives/think/</link>
      <pubDate>Thu, 23 Dec 2021 22:23:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/think/</guid>
      <description>不要觉得一件事情简单，自我感觉没有挑战，而无动于衷。你所谓的简单，在很多时候只是你并没有去深度思考事情的本质。
即使是简单的curd工作，你有没有想过，当前你的设计是否满足未来产品形态的变动？一改就头痛？还是写出来的代码测试用例都难写？
你有没有这样的时刻？
当别人带着一个问题来寻找你进行解决方案。你思考一番，在这个问题的基础上加以补丁，你自以为解决了这个问题，直到后面补丁也越来越多。
你有没有想过，其实，很多时候，出发点就错了。我们都把目光直接切入这个问题的解决方案，也就是所谓的补丁(我并不是说我们不解决问题)，而是，是不是忽略了去思考为什么会出现这样的问题？是不是一开始就错了？
如果一开始就错了，在这个错误的基础上产生错误的问题，我们应该直接揪出源头，然后干掉它。而不是在错误的基础上疯狂的给错误的问题打上错误的补丁。
和别人沟通的时候，当别人发表完自己的意见和观点，你开口的第一句是不是:
&amp;ldquo;不是这样的&amp;rdquo;。
你喜欢用否定句来当场否定别人，直接当场浇灭对方。
如果改成 &amp;ldquo;好的，我明白你意思了。但是我想了下，xxxx&amp;rdquo; 类似这样，沟通的效果会不会更加理想？</description>
    </item>
    
    <item>
      <title>&lt;&lt;不老奇事&gt;&gt;观后感</title>
      <link>https://www.syst.top/lives/year-end-summary/</link>
      <pubDate>Sun, 07 Nov 2021 21:12:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/year-end-summary/</guid>
      <description>今天刚好没事，看到了王传君的这部电影，过段买票去看了。
去之前以为这部片主题依旧是 “亲梅竹马”、“少时分离”、&amp;ldquo;长大偶遇&amp;rdquo;、&amp;ldquo;再续前缘&amp;rdquo;、“历经坎坷”、“最后遗憾”等等带有印象中各种标签的爱情片？
开头也确实和想象中相差无几。不过，中间画风突转太快。更多的是在探索生命的意义？电影中好多台词单独拿出来都是一条伤感唯美非主流的朋友圈。
其实电影的后半部分，对我来说，还是挺丧的。给我的总结是，在死亡面前，所有东西都毫无意义。
你不需要虚荣，不需要讨好他人，不需要带着一副面具伪装自己。</description>
    </item>
    
    <item>
      <title>可以躺平一时，不能一直躺平</title>
      <link>https://www.syst.top/lives/tp/</link>
      <pubDate>Sun, 22 Aug 2021 08:01:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/tp/</guid>
      <description>人可以躺平一时，不能一直躺平。
上周调整了生物钟，晚上十一点前入睡，早上六点起床。
真是一个明智的调整。
以前下班回家没有精力干其他的事。现在早上到上班的这段时间可以自我充电。写文章、敲代码，或者看看书&amp;hellip;&amp;hellip;，突然爱上了这种节奏。
言归正传，
年初开这个号的时候有规划做一些实战项目，可后面也一直没写。
转眼半年过去了，这段计划也应该被提上日程了。
接下来的时间我计划先写三个项目实战。
 grpc-shop 分布式爬虫 Raft 算法实现  为什么要写项目实战？
除了把知识点串起来之外，还有一个最重要的原因，我把它称之为 文档的艺术。
你平常一定会碰到以下困惑。
场景一：对接文档或者使用工具的时候，一定吐槽过别人写的是什么。
站在对接人的角度，我的关注点是 what、how，你却一个劲介绍 much niubi。
虽然我们会吐槽别人的文档，
但是这并不妨碍自己也写出一塌糊涂的文档，也照样一塌糊涂。别人照样对你口吐芬芳，这种场面太过真实了。
记忆中，文档和一次性口罩似乎是同性质的物品。前者用过就丢，后者草草写完封版。
场景二：在和别人讲解自己某个项目、模块、功能的时候，滔滔不绝。可对方依然云里雾里。就像这样：
归根结底，我觉得有五个原因:
 自身对做的东西没有深入去了解。遵循代码和我，有一个能跑的原则。 对细节了如指掌，但是表达能力出现问题。 没有站在读者的角度，你所谓的前置知识、技能、专业名词&amp;hellip;&amp;hellip;，对方完全不知，本质上还是信息(技术认知)差。 内心深处不想让别人了解这个系统，毕竟你想当唯一的消防员👩‍🚒。 读|听者是傻逼。(这个概率有多大?)  能把自己写过的东西、看过的项目&amp;hellip;&amp;hellip;，通过文字、嘴对嘴、视频等方式完整清晰的表达出来是一件非常重要且值得开干的事。
如果连文档都写不清楚，还指望自己能写好 ppt？
因为工作中接触过 grpc，然后也去看了部分源码。看源码的时候，恰巧又发现一处非致命的 bug ，顺手给提了个 pr，后面被合并了。
所以，第一个项目就规划写 grpc-shop。
大体已经规划完了，后面边开发边写文档，类似极客兔兔的七天系列。
grpc-shop 计划 15 篇左右完结撒花。
完毕。</description>
    </item>
    
    <item>
      <title>傻瓜式的我们</title>
      <link>https://www.syst.top/lives/about-everything/</link>
      <pubDate>Sun, 06 Jun 2021 23:49:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/about-everything/</guid>
      <description>为什么写这篇文章。
现代的信息流在消磨着我。还有我自己也在自我内耗中。
 一天要看多少次手机？ 认真工作的时候被手机打断或者自己工作两分钟时不时拿出手机？ 每天被多少垃圾信息推送？看到消息都忍不住点一下？ 完全没有自己的思考，只剩下无情的消息接受者。宛如行尸走肉 焦虑、沉不住气，每一个都想学，也每一种都没精。列出计划。  针对以上问题,
 杜绝工作时看手机，或者给每日处理手机的时间段，消息的处理也一样。 拒绝强迫症，不要点开消息。 对待问题，除了解决，海西要思考背后原理。 淡定淡定。一步一个脚印，多看别人源码。  </description>
    </item>
    
    <item>
      <title>如何成为一个更好的开发者</title>
      <link>https://www.syst.top/lives/to-better/</link>
      <pubDate>Sun, 09 May 2021 12:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/lives/to-better/</guid>
      <description>真正的成功者是在练习中慢慢积累起来的。
你在看大佬文章的时候，也许已经意识到了这一点。看到他们在做的一些事情，你就会想:
我不知道这个人为了实现目标付出了多少努力。
编码也不例外。如果你想要成为一个顶尖的工程师，你必须时刻地练习你的技能。
我主要会这么做。
目标 这是个人的信念，它也许能引导着我的一生。无论是从个人的角度还是从职业生涯，我们总是需要每个阶段为自己设置一个的目标，然后去干掉它。
比如，你可以:
  创建一个你一直想要创建的应用程序。
  认真看完一本你想看的书并进行独立的输出和思考。
  学习一门自己感兴趣的语言，通过它实现一个功能也好，还是把之前老项目重写。
  列举公司项目或者自己项目中的缺陷、痛点，通过思考、查阅资料、设计方案、落地完善系统。(别和我吹牛你的系统没问题)
  参与开源
  &amp;hellip;&amp;hellip;
  定目标的时候，不要太过于抽象，最好是一个可视化的目标。
另外设置目标的难度应该是超过当前能力范围，但是这个幅度不能过大，否则会脱离实际意识，我们就会称之为:劝退师。
如果目标很庞大，那么就需要进行拆解，就和我们系统模块一样，可以进行划分。目标也一样，可以进行拆分。设置一个总周期，那么相应的，阶段任务也就出来了。
更重要的是这个过程，过程才是目标的意义所在。结果只是意料之中的附属品。你永远也不知道这个过程能给你带来什么？打通任督二脉也不是不可能。
有些话我还是挺喜欢的。种一棵树最好的时间是十年前，其次是现在。
对于编程来说，空想是最没用的，一定得通过不断的练习。另外，延迟满足感是一件很重要的事情，当你觉得自己越来越菜的时候，可能是你越来越强的时候。
为什么是可能呢？
因为，也许你是真的菜。
我记得初入职场的时候，忘记实现了一个什么功能性的东西，那时候觉得自己好牛逼，现在我只想说：草率了。
输出 在实现目标的同时，一定会遇上自己不会的，从不会到会到熟练掌握存在一个过程，它也是一个个阶段。每一个阶段你都需要去总结分析你所学到的技能，如何知道自己的掌握程度？那一定是输出。输出的方式很多，比如:
单纯写 blog 给自己看，但是只存在自己的认知。
社区写文章分享。帮助别人的同时，可能有人能指出你的问题，或者提供了不一样的角度。
通过掌握的知识点写程序或者应用到实际项目中。
组内分享。
开源社区线下分享。(估计已经是大佬级别了)
多看书多阅读开源代码 目前公众号内卷比较严重，加上你看别人的文章都是别人学习、吸收、总结的最终产物。对于某个不了解的知识点，还是需要先看一手的资料。在这个基础上，回头看作者的文章，也许会有不一样的体会。
另外一篇文章由于篇幅限制或者侧重点的选择，往往会比较片面。这时候更应该看书了。你能吸动 &amp;laquo;TCP/IP详解&amp;raquo;的书，你看不懂别人写的阉割版 TCP/IP 文章？
至于源码，我觉得得从实际出发，比如项目中使用到的优秀库或者最近任务涉及到的技能想看别人的实现。整体架构？底层原理？设计细节？为什么要这样设计？只有了解底层原理，用起来才能更加舒心。从使用到原理，说不定后面有对应的需求，还会进行扩展，提交 PR，一举成为 Contributor。
总结 编码不是彩票，并不能一夜暴富。它是一个缓慢的过程，如果你能每天坚持向着目标学习，也许短时间你看不到任何可视化的效果。但是一年，两年&amp;hellip;..，当你回头想想一年前的自己是不是个傻逼，你就看到成长了，话糙理不糙。
仅以此篇献给我自己，也献给迷茫的你。</description>
    </item>
    
  </channel>
</rss>
